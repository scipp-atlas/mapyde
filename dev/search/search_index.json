{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mapyde","text":"CI/CD Docs Package Meta <p>MaPyDe stands for MadGraph-Pythia-Delphes which is a utility that allows one to run all of the various HEP toolings or chain them together and perform a quick analysis with the results, such as running CERN ATLAS SimpleAnalysis or pyhf.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Multiple backends supported<ul> <li> docker</li> <li> singularity</li> <li> apptainer</li> </ul> </li> <li>Easy configuration with sensible defaults</li> <li>Usable CLI relying on a single config file</li> </ul>"},{"location":"#license","title":"License","text":"<p>mapyde is distributed under the terms of the Apache 2.0 license.</p>"},{"location":"#navigation","title":"Navigation","text":"<p>Documentation for specific <code>MAJOR.MINOR</code> versions can be chosen by using the dropdown on the top of every page. The <code>dev</code> version reflects changes that have not yet been released.</p> <p>Also, desktop readers can use special keyboard shortcuts:</p> Keys Action <ul><li>, (comma)</li><li>p</li></ul> Navigate to the \"previous\" page <ul><li>. (period)</li><li>n</li></ul> Navigate to the \"next\" page <ul><li>/</li><li>s</li></ul> Display the search modal"},{"location":"install/","title":"Installation","text":""},{"location":"install/#pip","title":"pip","text":"<p>mapyde is available on PyPI and can be installed with pip.</p> <pre><code>pip install mapyde\n</code></pre> <p>Warning</p> <p>This method modifies the Python environment in which you choose to install. Consider instead using pipx or virtual environments to avoid dependency conflicts.</p>"},{"location":"install/#pipx","title":"pipx","text":"<p>pipx allows for the global installation of Python applications in isolated environments.</p> <pre><code>pipx install mapyde\n</code></pre>"},{"location":"install/#virtual-environment","title":"virtual environment","text":"<pre><code>python -m venv venv\nsource venv/bin/activate\npython -m pip install mapyde\n</code></pre>"},{"location":"install/#conda","title":"Conda","text":"<p>See the feedstock for more details.</p> <pre><code>conda install -c conda-forge mapyde\n</code></pre> <p>or with mamba:</p> <pre><code>mamba install mapyde\n</code></pre> <p>Warning</p> <p>This method modifies the Conda environment in which you choose to install. Consider instead using pipx or condax to avoid dependency conflicts.</p>"},{"location":"intro/","title":"Introduction","text":""},{"location":"intro/#configuration","title":"Configuration","text":"<p>All project-specific configuration recognized by mapyde can be defined in a custom <code>user.toml</code>:</p>  default ewkinos sleptons <pre><code>[base]\npath = \"/data/users/{{USER}}/SUSY\"\noutput = \"mytag\"\ntemplate = \"{{MAPYDE_TEMPLATES}}/defaults.toml\"\n\n[madgraph.proc]\nname = \"charginos\"\ncard = \"{{madgraph['proc']['name']}}\"\n\n[madgraph.masses]\nMN1 = 100\nMC1 = 150\n</code></pre> <pre><code>[base]\npath = \"/data/users/{{USER}}/SUSY\"\noutput = \"mytag\"\ntemplate = \"{{MAPYDE_TEMPLATES}}/ewkinos.toml\"\n\n[madgraph.proc]\nname = \"isr2L\"\ncard = \"{{madgraph['proc']['name']}}\"\n\n[madgraph.masses]\nMN2 = 250\nMC1 = 250\nMN1 = 240\n</code></pre> <pre><code>[base]\npath = \"/data/users/{{USER}}/SUSY\"\noutput = \"mytag\"\ntemplate = \"{{MAPYDE_TEMPLATES}}/sleptons.toml\"\n\n[madgraph.proc]\nname = \"isrslep\"\ncard = \"{{madgraph['proc']['name']}}\"\n\n[madgraph.masses]\nMSLEP = 250\nMN1 = 240\n</code></pre> <p>Tip</p> <p>This is all highly customizable with the usage of templates to make it easier to inherit a convenient set of defaults for which you can override.</p>"},{"location":"cli/about/","title":"About","text":""},{"location":"cli/reference/","title":"Reference","text":""},{"location":"cli/reference/#mapyde","title":"mapyde","text":"<p>Manage top-level options</p> <p>Usage:</p> <pre><code>mapyde [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --version                       Print the current version.\n  --prefix [data|cards|likelihoods|scripts|templates]\n                                  Print the path prefix for data files.\n  --tui                           Open Textual TUI.\n  --install-completion [bash|zsh|fish|powershell|pwsh]\n                                  Install completion for the specified shell.\n  --show-completion [bash|zsh|fish|powershell|pwsh]\n                                  Show completion for the specified shell, to\n                                  copy it or customize the installation.\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-config","title":"mapyde config","text":"<p>Usage:</p> <pre><code>mapyde config [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-config-generate-mg5","title":"mapyde config generate-mg5","text":"<p>Generate the madgraph configurations and write to local disk.</p> <p>Usage:</p> <pre><code>mapyde config generate-mg5 [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-config-parse","title":"mapyde config parse","text":"<p>Parse the configuration file and print to screen.</p> <p>Usage:</p> <pre><code>mapyde config parse [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run","title":"mapyde run","text":"<p>Usage:</p> <pre><code>mapyde run [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-all","title":"mapyde run all","text":"<p>Run madgraph, delphes, analysis, and pyhf.</p> <p>Usage:</p> <pre><code>mapyde run all [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-analysis","title":"mapyde run analysis","text":"<p>Run analysis.</p> <p>Usage:</p> <pre><code>mapyde run analysis [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-delphes","title":"mapyde run delphes","text":"<p>Run delphes.</p> <p>Usage:</p> <pre><code>mapyde run delphes [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-madgraph","title":"mapyde run madgraph","text":"<p>Run madgraph.</p> <p>Usage:</p> <pre><code>mapyde run madgraph [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-pyhf","title":"mapyde run pyhf","text":"<p>Run pyhf.</p> <p>Usage:</p> <pre><code>mapyde run pyhf [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-root2hdf5","title":"mapyde run root2hdf5","text":"<p>Transform from .root to .hdf5 format.</p> <p>Usage:</p> <pre><code>mapyde run root2hdf5 [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-sa2json","title":"mapyde run sa2json","text":"<p>Run sa2json.</p> <p>Usage:</p> <pre><code>mapyde run sa2json [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-sherpa","title":"mapyde run sherpa","text":"<p>Run Sherpa.</p> <p>Usage:</p> <pre><code>mapyde run sherpa [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-simpleanalysis","title":"mapyde run simpleanalysis","text":"<p>Run simpleanalysis (ATLAS tool)</p> <p>Usage:</p> <pre><code>mapyde run simpleanalysis [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"meta/authors/","title":"Authors","text":""},{"location":"meta/authors/#maintainers","title":"Maintainers","text":"<ul> <li>Mike Hance  </li> <li>Giordon Stark  </li> </ul>"},{"location":"meta/authors/#contributors","title":"Contributors","text":"<ul> <li>Be Our First!</li> </ul>"},{"location":"meta/faq/","title":"FAQ","text":""},{"location":"meta/faq/#backends","title":"Backends","text":"<p>Q: What backends do you support?</p> <p>A: So far: singularity, apptainer, and docker.</p>"},{"location":"meta/faq/#potpourri","title":"Potpourri","text":"<p>Q: Why is the FAQ empty?</p> <p>A: We're still working on fleshing it out. Check back soon. In the meantime, open a discussion or file an issue.</p>"},{"location":"reference/mapyde/","title":"mapyde","text":""},{"location":"reference/mapyde/#mapyde","title":"mapyde","text":"<p>Copyright \u00a9 2022 Michael Hance and Giordon Stark. All rights reserved.</p> <p>mapyde: A great package.</p>"},{"location":"reference/mapyde/container/","title":"container","text":""},{"location":"reference/mapyde/container/#mapyde.container","title":"container","text":"<p>Core Container functionality for managing OCI images.</p>"},{"location":"reference/mapyde/container/#mapyde.container.Container","title":"Container","text":"<pre><code>Container(*, image: str, user: int | None = None, group: int | None = None, mounts: list[tuple[PathOrStr, PathOrStr]] | None = None, cwd: PathOrStr | None = '/tmp', engine: ContainerEngine = 'docker', name: str | None = None, stdout: T.IO[bytes] | T.IO[str] | None = None, output_path: Path | None = None, logs_path: PathOrStr | None = None, additional_options: list[str] | None = None)\n</code></pre> <p>An object that represents a running OCI container.</p> Source code in <code>src/mapyde/container.py</code> <pre><code>def __init__(\n    self,\n    *,\n    image: str,\n    user: int | None = None,\n    group: int | None = None,\n    mounts: list[tuple[PathOrStr, PathOrStr]] | None = None,\n    cwd: PathOrStr | None = \"/tmp\",\n    engine: ContainerEngine = \"docker\",\n    name: str | None = None,\n    stdout: T.IO[bytes] | T.IO[str] | None = None,\n    output_path: Path | None = None,\n    logs_path: PathOrStr | None = None,\n    additional_options: list[str] | None = None,\n):\n    if not image:\n        msg = \"Must specify an image to run.\"\n        raise ValueError(msg)\n\n    try:\n        subprocess.run([\"bash\", \"-c\", f\"hash {engine}\"], check=True)\n    except subprocess.CalledProcessError as err:\n        msg = f\"{engine} does not exist on your system.\"\n        raise OSError(msg) from err\n\n    self.image = image\n    self.user = user or os.geteuid()\n    self.group = group or os.getegid()\n    self.mounts = mounts or []\n    self.cwd = cwd\n    self.engine = engine\n    self.name = name\n    self.stdin_config = subprocess.PIPE\n    self.stdout_config = stdout or subprocess.PIPE\n    self.stderr_config = subprocess.STDOUT\n    self.output_path = (output_path or Path()).resolve()\n    self.logs_path = logs_path\n    self.additional_options = additional_options or []\n\n    self.output_path.mkdir(parents=True, exist_ok=True)\n    for host, container in self.mounts:\n        if not Path(container).is_absolute():\n            msg = f\"The mount {host}:{container} does not point to an absolute path in the container.\"\n            raise ValueError(msg)\n</code></pre>"},{"location":"reference/mapyde/container/#mapyde.container.Container.call","title":"call","text":"<pre><code>call(args: bytes, cwd: PathOrStr | None = None, env: dict[str, str] | None = None) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Execute the provided command in the container. A smarter version of Container.process.communicate(args).</p> <p>Optionally change the current working directory (cwd) and set some environment variables.</p> Source code in <code>src/mapyde/container.py</code> <pre><code>def call(\n    self,\n    args: bytes,\n    cwd: PathOrStr | None = None,\n    env: dict[str, str] | None = None,\n) -&gt; tuple[bytes, bytes]:\n    \"\"\"\n    Execute the provided command in the container. A smarter version of Container.process.communicate(args).\n\n    Optionally change the current working directory (cwd) and set some environment variables.\n    \"\"\"\n    if cwd is None:\n        cwd = self.cwd\n\n    chdir = \"\"\n    if cwd:\n        # singularity/apptainer mount host $TMPDIR into /tmp which might be\n        # unexpectedly full of files so make an empty temporary directory\n        chdir = \"cd $(mktemp -d)\" if cwd == \"/tmp\" else f\"cd {cwd}\"\n\n    env_assignments = (\n        \" \".join(f\"{shlex.quote(k)}={shlex.quote(v)}\" for k, v in env.items())\n        if env is not None\n        else \"\"\n    )\n\n    command = bytes(\n        f\"\"\"{chdir}\n            env {env_assignments} {args.decode()}\n            \"\"\",\n        \"utf-8\",\n    )\n\n    return self.process.communicate(command)\n</code></pre>"},{"location":"reference/mapyde/prefix/","title":"prefix","text":""},{"location":"reference/mapyde/prefix/#mapyde.prefix","title":"prefix","text":"<p>Copyright \u00a9 2022 Michael Hance and Giordon Stark. All rights reserved.</p>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix","title":"Prefix","text":"<p>             Bases: <code>__class__</code></p> <p>A module-level wrapper around :mod:<code>mapyde</code> which will provide the prefixes</p> <p>Examples:</p> CallableContext Manager <pre><code>&gt;&gt;&gt; import mapyde.prefix\n&gt;&gt;&gt; import pathlib\n&gt;&gt;&gt; curr_path = mapyde.prefix.data\n&gt;&gt;&gt; curr_path  # doctest: +ELLIPSIS\nPosixPath('.../pyhf/schemas')\n&gt;&gt;&gt; new_path = pathlib.Path(\"/home/root/my/new/path\")\n&gt;&gt;&gt; mapyde.prefix(new_path)  # doctest: +ELLIPSIS\n&lt;module 'mapyde.prefix' from ...&gt;\n&gt;&gt;&gt; mapyde.prefix.data\nPosixPath('/home/root/my/new/path')\n&gt;&gt;&gt; mapyde.prefix(curr_path)  # doctest: +ELLIPSIS\n&lt;module 'mapyde.prefix' from ...&gt;\n&gt;&gt;&gt; mapyde.prefix.data  # doctest: +ELLIPSIS\nPosixPath('.../pyhf/schemas')\n</code></pre> <pre><code>&gt;&gt;&gt; import mapyde.prefix\n&gt;&gt;&gt; import pathlib\n&gt;&gt;&gt; curr_path = mapyde.prefix.data\n&gt;&gt;&gt; curr_path  # doctest: +ELLIPSIS\nPosixPath('.../pyhf/schemas')\n&gt;&gt;&gt; new_path = pathlib.Path(\"/home/root/my/new/path\")\n&gt;&gt;&gt; with mapyde.prefix(new_path):\n...     print(repr(mapyde.prefix.data))\n...\nPosixPath('/home/root/my/new/path')\n&gt;&gt;&gt; mapyde.prefix.data  # doctest: +ELLIPSIS\nPosixPath('.../pyhf/schemas')\n</code></pre>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix.cards","title":"cards  <code>property</code> <code>writable</code>","text":"<pre><code>cards: Path\n</code></pre> <p>The local path for cards.</p>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix.data","title":"data  <code>property</code> <code>writable</code>","text":"<pre><code>data: Path\n</code></pre> <p>The local path for data.</p>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix.likelihoods","title":"likelihoods  <code>property</code> <code>writable</code>","text":"<pre><code>likelihoods: Path\n</code></pre> <p>The local path for likelihoods.</p>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix.scripts","title":"scripts  <code>property</code> <code>writable</code>","text":"<pre><code>scripts: Path\n</code></pre> <p>The local path for scripts.</p>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix.templates","title":"templates  <code>property</code> <code>writable</code>","text":"<pre><code>templates: Path\n</code></pre> <p>The local path for templates.</p>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix.__call__","title":"__call__","text":"<pre><code>__call__(new_path: PathOrStr) -&gt; Self\n</code></pre> <p>Change the local search path for finding data locally.</p> <p>Parameters:</p> Name Type Description Default <code>new_path</code> <code>Path</code> <p>Path to folder containing the data</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>Prefix</code> <p>Returns itself (for contextlib management)</p> Source code in <code>src/mapyde/prefix.py</code> <pre><code>def __call__(self, new_path: PathOrStr) -&gt; Self:\n    \"\"\"\n    Change the local search path for finding data locally.\n\n    Args:\n        new_path (pathlib.Path): Path to folder containing the data\n\n    Returns:\n        self (mapyde.prefix.Prefix): Returns itself (for contextlib management)\n    \"\"\"\n    self._orig_path, self.data = self.data, Path(new_path)\n    return self\n</code></pre>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix.__exit__","title":"__exit__","text":"<pre><code>__exit__(*args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Reset the local data path for cards locally.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/mapyde/prefix.py</code> <pre><code>def __exit__(self, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"\n    Reset the local data path for cards locally.\n\n    Returns:\n        None\n    \"\"\"\n    self.data = self._orig_path\n</code></pre>"},{"location":"reference/mapyde/runner/","title":"runner","text":""},{"location":"reference/mapyde/runner/#mapyde.runner","title":"runner","text":"<p>File containing functionality for running the various steps in the workflow.</p>"},{"location":"reference/mapyde/runner/#mapyde.runner.dumpconfig","title":"dumpconfig","text":"<pre><code>dumpconfig(config: ImmutableConfig) -&gt; None\n</code></pre> <p>Dump configuration files used to do stuff, useful for debugging config issues after the fact</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def dumpconfig(config: ImmutableConfig) -&gt; None:\n    \"\"\"\n    Dump configuration files used to do stuff, useful for debugging config issues after the fact\n    \"\"\"\n\n    output_path = (\n        Path(config[\"base\"][\"path\"])\n        .joinpath(config[\"base\"][\"output\"])\n        .joinpath(\"configs\")\n        .resolve()\n    )\n    output_path.mkdir(parents=True, exist_ok=True)\n\n    now = datetime.now()\n    with utils.output_path(config).joinpath(\n        f\"configs/config_{now.year}{now.month}{now.day}{now.hour}{now.minute}{now.second}.json\"\n    ).open(\n        \"w\",\n        encoding=\"utf-8\",\n    ) as outfile:\n        json.dump(config, outfile, ensure_ascii=False, indent=4)\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.mounts","title":"mounts","text":"<pre><code>mounts(config: ImmutableConfig) -&gt; list[tuple[PathOrStr, PathOrStr]]\n</code></pre> <p>define mount points for all containers</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def mounts(config: ImmutableConfig) -&gt; list[tuple[PathOrStr, PathOrStr]]:\n    \"\"\"\n    define mount points for all containers\n    \"\"\"\n\n    return [\n        (str(Path(config[\"base\"][\"cards_path\"]).resolve()), \"/cards\"),\n        (str(Path(config[\"base\"][\"scripts_path\"]).resolve()), \"/scripts\"),\n        (str(Path(config[\"base\"][\"likelihoods_path\"]).resolve()), \"/likelihoods\"),\n        (str(utils.output_path(config)), \"/data\"),\n    ]\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_ana","title":"run_ana","text":"<pre><code>run_ana(config: ImmutableConfig) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Run analysis.</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_ana(config: ImmutableConfig) -&gt; tuple[bytes, bytes]:\n    \"\"\"\n    Run analysis.\n    \"\"\"\n    xsec = 1000.0\n\n    xqcut_gt_0 = (\"xqcut\" in config[\"madgraph\"][\"run\"][\"options\"]) and (\n        config[\"madgraph\"][\"run\"][\"options\"][\"xqcut\"] &gt; 0\n    )\n\n    if config[\"analysis\"][\"XSoverride\"] &gt; 0:\n        xsec = config[\"analysis\"][\"XSoverride\"]\n    else:\n        if (\n            \"run_without_decays\" in config[\"madgraph\"]\n            and config[\"madgraph\"][\"run_without_decays\"]\n        ):\n            # modify config to access XS from run without decays\n            origcard = config[\"madgraph\"][\"proc\"][\"card\"]\n            origout = config[\"base\"][\"output\"]\n\n            config[\"madgraph\"][\"proc\"][\"card\"] = (\n                config[\"madgraph\"][\"proc\"][\"card\"] + \"_nodecays\"\n            )\n            config[\"base\"][\"output\"] = config[\"base\"][\"output\"] + \"_nodecays\"\n\n            with utils.output_path(config).joinpath(\n                config[\"base\"][\"logs\"], \"docker_mgpy.log\"\n            ).open(encoding=\"utf-8\") as fpointer:\n                for line in fpointer.readlines():\n                    # TODO: can we flip this logic around to be better?\n                    # refactor into a parse_xsec utility or something?\n                    if \"Cross-section :\" in line:\n                        xsec = float(line.split()[2])  # take the last instance\n\n            # change config options back\n            config[\"madgraph\"][\"proc\"][\"card\"] = origcard\n            config[\"base\"][\"output\"] = origout\n\n            # if we're doing MLM matching and not trusting the final XS output by Pythia, then\n            # fix the XS from before decays to account for matching efficiency\n            if xqcut_gt_0:\n                with utils.output_path(config).joinpath(\n                    config[\"base\"][\"logs\"], \"docker_mgpy.log\"\n                ).open(encoding=\"utf-8\") as fpointer:\n                    for line in fpointer.readlines():\n                        if \"Nb of events after merging\" in line:\n                            xsec *= (\n                                float(line.split()[6]) / config[\"madgraph\"][\"nevents\"]\n                            )  # take the last instance\n        elif (\n            config[\"madspin\"][\"skip\"] is False\n            and \"branchingratio\" in config[\"analysis\"]\n            and config[\"analysis\"][\"branchingratio\"] &gt; 0\n        ):\n            # we've run madspin AND set a non-zero BR in the configuration, so we're going\n            # to take the cross section from before madspin runs.\n            with utils.output_path(config).joinpath(\n                config[\"base\"][\"logs\"], \"docker_mgpy.log\"\n            ).open(encoding=\"utf-8\") as fpointer:\n                for line in fpointer.readlines():\n                    # TODO: can we flip this logic around to be better?\n                    # refactor into a parse_xsec utility or something?\n                    if \"Cross-section :\" in line:\n                        xsec = float(line.split()[2])  # take the first instance\n                        break\n\n            # if we're doing MLM matching and not trusting the final XS output by Pythia, then\n            # fix the XS from before decays to account for matching efficiency\n            if xqcut_gt_0:\n                with utils.output_path(config).joinpath(\n                    config[\"base\"][\"logs\"], \"docker_mgpy.log\"\n                ).open(encoding=\"utf-8\") as fpointer:\n                    for line in fpointer.readlines():\n                        if \"Nb of events after merging\" in line:\n                            xsec *= (\n                                float(line.split()[6]) / config[\"madgraph\"][\"nevents\"]\n                            )  # take the last instance\n        else:\n            with utils.output_path(config).joinpath(\n                config[\"base\"][\"logs\"], \"docker_mgpy.log\"\n            ).open(encoding=\"utf-8\") as fpointer:\n                for line in fpointer.readlines():\n                    # TODO: can we flip this logic around to be better?\n                    # refactor into a parse_xsec utility or something?\n                    if xqcut_gt_0:\n                        if \"Matched cross-section :\" in line:\n                            xsec = float(line.split()[3])  # take the last instance\n                    else:\n                        if \"Cross-section :\" in line:\n                            xsec = float(line.split()[2])  # take the last instance\n\n        if \"branchingratio\" in config[\"analysis\"]:\n            xsec *= config[\"analysis\"][\"branchingratio\"]\n\n    if config[\"analysis\"][\"kfactor\"] &gt; 0:\n        xsec *= config[\"analysis\"][\"kfactor\"]\n\n    image = f\"ghcr.io/scipp-atlas/mapyde/{config['delphes']['version']}\"\n    command = bytes(\n        f\"\"\"mkdir -p {Path(config['analysis']['output']).parent} &amp;&amp; \\\n/scripts/{config['analysis']['script']} --input {Path('/data').joinpath(config['delphes']['output'])} \\\n                                        --output {config['analysis']['output']} \\\n                                        --lumi {config['analysis']['lumi']} \\\n                                        --XS {xsec} &amp;&amp; \\\nrsync -rav . /data/\"\"\",\n        \"utf-8\",\n    )\n\n    with Container(\n        image=image,\n        name=f\"{config['base']['output']}__hists\",\n        engine=config[\"base\"].get(\"engine\", \"docker\"),\n        mounts=mounts(config),\n        stdout=sys.stdout,\n        output_path=utils.output_path(config),\n        logs_path=config[\"base\"][\"logs\"],\n    ) as container:\n        stdout, stderr = container.call(command)\n\n    return stdout, stderr\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_delphes","title":"run_delphes","text":"<pre><code>run_delphes(config: ImmutableConfig) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Run delphes.</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_delphes(config: ImmutableConfig) -&gt; tuple[bytes, bytes]:\n    \"\"\"\n    Run delphes.\n    \"\"\"\n    # ./test/wrapper_delphes.py config_file\n    image = f\"ghcr.io/scipp-atlas/mapyde/{config['delphes']['version']}\"\n    command = bytes(\n        f\"\"\"pwd &amp;&amp; ls -lavh &amp;&amp; ls -lavh /data &amp;&amp; \\\nfind /data/madgraph -name \"*hepmc.gz\" &amp;&amp; \\\ncp $(find /data/madgraph -name \"*hepmc.gz\") hepmc.gz &amp;&amp; \\\ngunzip -f hepmc.gz &amp;&amp; \\\ncp /cards/delphes/{config['delphes']['card']} . &amp;&amp; \\\n/bin/ls -ltrh --color &amp;&amp; \\\nmkdir -p {Path(config['delphes']['output']).parent} &amp;&amp; \\\nset -x &amp;&amp; \\\n/usr/local/share/delphes/delphes/DelphesHepMC2 {config['delphes']['card']} {Path(config['delphes']['output'])} hepmc &amp;&amp; \\\nset +x &amp;&amp; \\\nrsync -rav --exclude hepmc . /data/\"\"\",\n        \"utf-8\",\n    )\n\n    with Container(\n        image=image,\n        name=f\"{config['base']['output']}__delphes\",\n        engine=config[\"base\"].get(\"engine\", \"docker\"),\n        mounts=mounts(config),\n        stdout=sys.stdout,\n        output_path=utils.output_path(config),\n        logs_path=config[\"base\"][\"logs\"],\n    ) as container:\n        stdout, stderr = container.call(command)\n\n    return stdout, stderr\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_madgraph","title":"run_madgraph","text":"<pre><code>run_madgraph(config: ImmutableConfig) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Run madgraph.</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_madgraph(config: ImmutableConfig) -&gt; tuple[bytes, bytes]:\n    \"\"\"\n    Run madgraph.\n    \"\"\"\n\n    # in some cases we'll need to run MG once to get a XS, e.g. without decays, and then run again with the \"real\" proc card.\n    if (\n        \"run_without_decays\" in config[\"madgraph\"]\n        and config[\"madgraph\"][\"run_without_decays\"]\n    ):\n        # modify config to run without decays and store in a separate area\n        origcard = config[\"madgraph\"][\"proc\"][\"card\"]\n        origout = config[\"base\"][\"output\"]\n        origpythia = config[\"pythia\"][\"skip\"]\n\n        config[\"madgraph\"][\"proc\"][\"card\"] = (\n            config[\"madgraph\"][\"proc\"][\"card\"] + \"_nodecays\"\n        )\n        config[\"base\"][\"output\"] = config[\"base\"][\"output\"] + \"_nodecays\"\n        config[\"pythia\"][\"skip\"] = True\n\n        madgraph.generate_mg5config(config)\n\n        image = f\"ghcr.io/scipp-atlas/mapyde/{config['madgraph']['version']}\"\n        command = bytes(\n            f\"mg5_aMC /data/{config['madgraph']['output']} &amp;&amp; rsync -a PROC_madgraph /data/madgraph\\n\",\n            \"utf-8\",\n        )\n\n        with Container(\n            image=image,\n            name=f\"{config['base']['output']}__mgpy\",\n            engine=config[\"base\"].get(\"engine\", \"docker\"),\n            mounts=mounts(config),\n            stdout=sys.stdout,\n            output_path=utils.output_path(config),\n            logs_path=config[\"base\"][\"logs\"],\n        ) as container:\n            stdout, stderr = container.call(command)\n\n        # change config options back\n        config[\"madgraph\"][\"proc\"][\"card\"] = origcard\n        config[\"base\"][\"output\"] = origout\n        config[\"pythia\"][\"skip\"] = origpythia\n\n    madgraph.generate_mg5config(config)\n\n    image = f\"ghcr.io/scipp-atlas/mapyde/{config['madgraph']['version']}\"\n\n    if (\n        \"image\" in config[\"madgraph\"]\n        and config[\"madgraph\"][\"image\"] is not None\n        and config[\"madgraph\"][\"image\"] != \"\"\n    ):\n        image = config[\"madgraph\"][\"image\"]\n\n    command = bytes(\n        f\"mg5_aMC /data/{config['madgraph']['output']} &amp;&amp; rsync -a PROC_madgraph /data/madgraph \\n\",\n        \"utf-8\",\n    )\n    if config[\"madgraph\"].get(\"keep_output\", False):\n        command = bytes(\n            f\"mg5_aMC /data/{config['madgraph']['output']} &amp;&amp; \\\nmkdir -p /data/madgraph &amp;&amp; \\\nrsync -a PROC_madgraph/Events/run_01/unweighted_events.lhe.gz /data/madgraph/ &amp;&amp; \\\nrsync -a PROC_madgraph/Events/run_01/tag_1_pythia8_events.hepmc.gz /data/madgraph/ \\n\",\n            \"utf-8\",\n        )\n\n    with Container(\n        image=image,\n        name=f\"{config['base']['output']}__mgpy\",\n        engine=config[\"base\"].get(\"engine\", \"docker\"),\n        mounts=mounts(config),\n        stdout=sys.stdout,\n        output_path=utils.output_path(config),\n        logs_path=config[\"base\"][\"logs\"],\n    ) as container:\n        stdout, stderr = container.call(command)\n\n    return stdout, stderr\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_pyhf","title":"run_pyhf","text":"<pre><code>run_pyhf(config: ImmutableConfig) -&gt; tuple[bytes, bytes, MutableConfig]\n</code></pre> <p>Run statistical inference via pyhf.</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_pyhf(\n    config: ImmutableConfig,\n) -&gt; tuple[bytes, bytes, MutableConfig]:\n    \"\"\"\n    Run statistical inference via pyhf.\n    \"\"\"\n    assert config\n\n    image = f\"ghcr.io/scipp-atlas/mapyde/{config['pyhf']['image']}\"\n    script = Path(\"/scripts\", config[\"pyhf\"][\"script\"])\n    command = bytes(\n        f\"\"\"python3.8 {script} -b /likelihoods/{config['pyhf']['likelihood']} -s {config['sa2json']['output']} -n {config['base']['output']} {config['pyhf']['gpu-options']} {config['pyhf']['other-options']}\"\"\",\n        \"utf-8\",\n    )\n\n    dumpconfig(config)\n\n    addl_opts = None\n    if \"-c\" not in config[\"pyhf\"][\"gpu-options\"]:\n        addl_opts = [\"--gpus\", \"all\"]\n\n    with Container(\n        image=image,\n        name=f\"{config['base']['output']}__{script.stem}\",\n        engine=config[\"base\"].get(\"engine\", \"docker\"),\n        mounts=mounts(config),\n        stdout=sys.stdout,\n        output_path=utils.output_path(config),\n        logs_path=config[\"base\"][\"logs\"],\n        cwd=\"/data\",\n        additional_options=addl_opts,\n    ) as container:\n        stdout, stderr = container.call(command)\n\n    with Path(config[\"base\"][\"path\"]).joinpath(\n        config[\"base\"][\"output\"], f\"{script.stem}_results.json\"\n    ).open(encoding=\"utf-8\") as fpointer:\n        data = json.load(fpointer)\n\n    return (\n        stdout,\n        stderr,\n        data,\n    )\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_root2hdf5","title":"run_root2hdf5","text":"<pre><code>run_root2hdf5(config: ImmutableConfig) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Transform ROOT file to hdf5 format</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_root2hdf5(config: ImmutableConfig) -&gt; tuple[bytes, bytes]:\n    \"\"\"\n    Transform ROOT file to hdf5 format\n    \"\"\"\n    assert config\n\n    image = \"ghcr.io/scipp-atlas/mapyde/pyplotting:latest\"\n    command = bytes(\n        f\"\"\"python3 /scripts/root2hdf5.py {config['root2hdf5']['input']}:{config['root2hdf5']['treename']} \"\"\",\n        \"utf-8\",\n    )\n\n    with Container(\n        image=image,\n        name=f\"{config['base']['output']}__root2hdf5\",\n        engine=config[\"base\"].get(\"engine\", \"docker\"),\n        mounts=mounts(config),\n        stdout=sys.stdout,\n        output_path=utils.output_path(config),\n        logs_path=config[\"base\"][\"logs\"],\n        cwd=\"/data\",\n    ) as container:\n        stdout, stderr = container.call(command)\n\n    return stdout, stderr\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_sa2json","title":"run_sa2json","text":"<pre><code>run_sa2json(config: ImmutableConfig) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Convert SA ROOT file to HiFa JSON.</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_sa2json(config: ImmutableConfig) -&gt; tuple[bytes, bytes]:\n    \"\"\"\n    Convert SA ROOT file to HiFa JSON.\n    \"\"\"\n    assert config\n\n    inputstr = \"\"\n    for i in config[\"sa2json\"][\"inputs\"].split():  # pylint: disable=consider-using-join\n        inputstr += f\" -i {i} \"  # pylint: disable=consider-using-join\n\n    scalefactorstring = \"\"\n    if \"hepmc\" in config[\"simpleanalysis\"][\"input\"]:\n        # scale weights up by kfactor*br and down by number of generated events\n        scalefactor = config[\"analysis\"][\"kfactor\"] / config[\"madgraph\"][\"nevents\"]\n        scalefactorstring = f\"--scale {scalefactor}\"\n\n    image = f\"ghcr.io/scipp-atlas/mapyde/{config['sa2json']['image']}\"\n    command = bytes(\n        f\"\"\"python /scripts/SAtoJSON.py {inputstr} -o {config['sa2json']['output']} -n {config['base']['output']} -b /likelihoods/{config['pyhf']['likelihood']} -l {config['analysis']['lumi']} {config['sa2json']['options']} {scalefactorstring}\"\"\",\n        \"utf-8\",\n    )\n\n    with Container(\n        image=image,\n        name=f\"{config['base']['output']}__SA2json\",\n        engine=config[\"base\"].get(\"engine\", \"docker\"),\n        mounts=mounts(config),\n        stdout=sys.stdout,\n        output_path=utils.output_path(config),\n        logs_path=config[\"base\"][\"logs\"],\n        cwd=\"/data\",\n    ) as container:\n        stdout, stderr = container.call(command)\n\n    return stdout, stderr\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_sherpa","title":"run_sherpa","text":"<pre><code>run_sherpa(config: ImmutableConfig) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Run sherpa.</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_sherpa(config: ImmutableConfig) -&gt; tuple[bytes, bytes]:\n    \"\"\"\n    Run sherpa.\n    \"\"\"\n\n    output_path = (\n        Path(config[\"base\"][\"path\"]).joinpath(config[\"base\"][\"output\"]).resolve()\n    )\n    output_path.mkdir(parents=True, exist_ok=True)\n\n    image = \"sherpamc/sherpa:2.2.7\"\n    command = bytes(\n        f\"\"\"/bin/bash -c \"mkdir sherpa &amp;&amp; \\\ncd sherpa &amp;&amp; \\\ncp -p /cards/sherpa/{config['sherpa']['proc']} . &amp;&amp; \\\nls -ltrh &amp;&amp; \\\ncat {config['sherpa']['proc']} &amp;&amp; \\\nmpirun -n {config['sherpa']['cores']} Sherpa -f {config['sherpa']['proc']} -e {config['sherpa']['nevents']} &amp;&amp; \\\nmv sherpa.hepmc.hepmc2g sherpa.hepmc.gz &amp;&amp; \\\ncd ../ &amp;&amp; \\\ncp -a sherpa/ /data/\" \"\"\",\n        \"utf-8\",\n    )\n\n    with Container(\n        image=image,\n        name=f\"{config['base']['output']}__sherpa\",\n        engine=config[\"base\"].get(\"engine\", \"docker\"),\n        mounts=mounts(config),\n        stdout=sys.stdout,\n        output_path=utils.output_path(config),\n        logs_path=config[\"base\"][\"logs\"],\n    ) as container:\n        stdout, stderr = container.call(command)\n\n    return stdout, stderr\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_simpleanalysis","title":"run_simpleanalysis","text":"<pre><code>run_simpleanalysis(config: ImmutableConfig) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Run SimpleAnalysis.</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_simpleanalysis(config: ImmutableConfig) -&gt; tuple[bytes, bytes]:\n    \"\"\"\n    Run SimpleAnalysis.\n    \"\"\"\n\n    image = \"gitlab-registry.cern.ch/atlas-sa/simple-analysis:master\"\n    command = bytes(\n        f\"\"\"mkdir -p tmp_SA &amp;&amp; cd tmp_SA &amp;&amp; \\\n/opt/SimpleAnalysis/ci/entrypoint.sh simpleAnalysis -a {config['simpleanalysis']['name']} ../{config['analysis']['output']} -n &amp;&amp; \\\nmv {config['simpleanalysis']['name']}.root ../{config['simpleanalysis']['name']}{config['simpleanalysis']['outputtag']}.root &amp;&amp; \\\nmv {config['simpleanalysis']['name']}.txt ../{config['simpleanalysis']['name']}{config['simpleanalysis']['outputtag']}.txt &amp;&amp; \\\ncd ../ &amp;&amp; rm -rf tmp_SA\"\"\",\n        \"utf-8\",\n    )\n    if (\n        \"input\" in config[\"simpleanalysis\"]\n        and \"hepmc\" in config[\"simpleanalysis\"][\"input\"]\n    ):\n        command = bytes(\n            f\"\"\"mkdir -p tmp_SA &amp;&amp; cd tmp_SA &amp;&amp; \\\nfind /data -name \"*hepmc.gz\" &amp;&amp; \\\ncp $(find /data/madgraph -name \"*hepmc.gz\") hepmc.gz &amp;&amp; \\\ngunzip -f hepmc.gz &amp;&amp; \\\n/opt/SimpleAnalysis/ci/entrypoint.sh simpleAnalysis -a {config['simpleanalysis']['name']} {config['simpleanalysis']['input']} -n &amp;&amp; \\\nmv {config['simpleanalysis']['name']}.root ../{config['simpleanalysis']['name']}{config['simpleanalysis']['outputtag']}.root &amp;&amp; \\\nmv {config['simpleanalysis']['name']}.txt ../{config['simpleanalysis']['name']}{config['simpleanalysis']['outputtag']}.txt &amp;&amp; \\\nrm hepmc &amp;&amp; \\\ncd ../ &amp;&amp; rm -rf tmp_SA\"\"\",\n            \"utf-8\",\n        )\n\n    with Container(\n        image=image,\n        name=f\"{config['base']['output']}__simpleanalysis\",\n        engine=config[\"base\"].get(\"engine\", \"docker\"),\n        mounts=mounts(config),\n        stdout=sys.stdout,\n        cwd=\"/data\",\n        output_path=utils.output_path(config),\n        logs_path=config[\"base\"][\"logs\"],\n    ) as container:\n        stdout, stderr = container.call(command)\n\n    return stdout, stderr\n</code></pre>"},{"location":"reference/mapyde/typing/","title":"typing","text":""},{"location":"reference/mapyde/typing/#mapyde.typing","title":"typing","text":"<p>Typehint helpers.</p>"},{"location":"reference/mapyde/utils/","title":"utils","text":""},{"location":"reference/mapyde/utils/#mapyde.utils","title":"utils","text":"<p>Utilities for managing configuration.</p>"},{"location":"reference/mapyde/utils/#mapyde.utils.build_config","title":"build_config","text":"<pre><code>build_config(user: MutableConfig, depth: int = 0) -&gt; T.Any\n</code></pre> <p>Function to build a configuration from a user-provided toml configuration on top of the base/template one.</p> <p>The templates can be further nested (this function is recursive) up to a maximum (non-configurable) depth of 10.</p> Source code in <code>src/mapyde/utils.py</code> <pre><code>def build_config(user: MutableConfig, depth: int = 0) -&gt; T.Any:\n    \"\"\"\n    Function to build a configuration from a user-provided toml configuration on top of the base/template one.\n\n    The templates can be further nested (this function is recursive) up to a maximum (non-configurable) depth of 10.\n\n    \"\"\"\n\n    template_str = user.get(\"base\", {}).pop(\n        \"template\", str(prefix.templates / \"defaults.toml\")  # type: ignore[attr-defined]  # pylint: disable=no-member\n    )\n    parent = {}\n\n    if template_str:\n        if depth &gt;= 10:\n            msg = 'Maximum template depth (10) exceeded. This is likely due to your base template not having `\"template\" = false` set.'\n            raise RuntimeError(msg)\n\n        template_path = Path(render_string(template_str))\n\n        with resources.as_file(template_path) as template:\n            if not template.exists():\n                msg = f\"{template_path} does not exist.\"\n                raise OSError(msg)\n            parent = build_config(\n                load_config(template.name, str(template.parent)), depth=depth + 1\n            )\n\n    variables = merge(parent, user)\n\n    # only render the entire merged configuration, not the intermediate ones\n    return (\n        variables\n        if depth\n        else tomllib.loads(render_string(tomli_w.dumps(variables), variables))\n    )\n</code></pre>"},{"location":"reference/mapyde/utils/#mapyde.utils.env_override","title":"env_override","text":"<pre><code>env_override(value: T.Any, key: str) -&gt; T.Any\n</code></pre> <p>Helper function for jinja2 to override environment variables</p> Source code in <code>src/mapyde/utils.py</code> <pre><code>def env_override(value: T.Any, key: str) -&gt; T.Any:\n    \"\"\"\n    Helper function for jinja2 to override environment variables\n    \"\"\"\n    return os.getenv(key, value)\n</code></pre>"},{"location":"reference/mapyde/utils/#mapyde.utils.load_config","title":"load_config","text":"<pre><code>load_config(filename: str, cwd: str = '.') -&gt; T.Any\n</code></pre> <p>Helper function to load a local toml configuration by filename</p> Source code in <code>src/mapyde/utils.py</code> <pre><code>def load_config(filename: str, cwd: str = \".\") -&gt; T.Any:\n    \"\"\"\n    Helper function to load a local toml configuration by filename\n    \"\"\"\n    env = Environment(loader=FileSystemLoader(cwd))\n    env.filters[\"env_override\"] = env_override\n\n    tpl = env.get_template(filename)\n    assert tpl.filename\n    with Path(tpl.filename).open(\"rb\") as fpointer:\n        return tomllib.load(fpointer)\n</code></pre>"},{"location":"reference/mapyde/utils/#mapyde.utils.merge","title":"merge","text":"<pre><code>merge(left: MutableConfig, right: ImmutableConfig, path: list[str] | None = None) -&gt; ImmutableConfig\n</code></pre> <p>merges right dictionary into left dictionary</p> Source code in <code>src/mapyde/utils.py</code> <pre><code>def merge(\n    left: MutableConfig, right: ImmutableConfig, path: list[str] | None = None\n) -&gt; ImmutableConfig:\n    \"\"\"\n    merges right dictionary into left dictionary\n    \"\"\"\n    if path is None:\n        path = []\n    for key in right:\n        if key in left:\n            if isinstance(left[key], dict) and isinstance(right[key], dict):\n                merge(left[key], right[key], [*path, str(key)])\n            else:\n                left[key] = right[key]\n        else:\n            left[key] = right[key]\n    return left\n</code></pre>"},{"location":"reference/mapyde/utils/#mapyde.utils.output_path","title":"output_path","text":"<pre><code>output_path(config: ImmutableConfig) -&gt; Path\n</code></pre> <p>Return the output path from the config.</p> Source code in <code>src/mapyde/utils.py</code> <pre><code>def output_path(config: ImmutableConfig) -&gt; Path:\n    \"\"\"\n    Return the output path from the config.\n    \"\"\"\n    return Path(config[\"base\"][\"path\"]).joinpath(config[\"base\"][\"output\"]).resolve()\n</code></pre>"},{"location":"reference/mapyde/utils/#mapyde.utils.render_string","title":"render_string","text":"<pre><code>render_string(blob: str, variables: ImmutableConfig | None = None) -&gt; str\n</code></pre> <p>Render a string using various variables set by the mapyde package.</p> Source code in <code>src/mapyde/utils.py</code> <pre><code>def render_string(blob: str, variables: ImmutableConfig | None = None) -&gt; str:\n    \"\"\"\n    Render a string using various variables set by the mapyde package.\n    \"\"\"\n    variables = variables or {}\n    tpl = Template(blob)\n    return tpl.render(\n        PWD=Path(os.getenv(\"PWD\", \".\")).as_posix(),\n        USER=os.getenv(\"USER\", \"USER\"),\n        MAPYDE_DATA=prefix.data.as_posix(),  # type: ignore[attr-defined]\n        MAPYDE_CARDS=prefix.cards.as_posix(),  # type: ignore[attr-defined]  # pylint: disable=no-member\n        MAPYDE_LIKELIHOODS=prefix.likelihoods.as_posix(),  # type: ignore[attr-defined]  # pylint: disable=no-member\n        MAPYDE_SCRIPTS=prefix.scripts.as_posix(),  # type: ignore[attr-defined]  # pylint: disable=no-member\n        MAPYDE_TEMPLATES=prefix.templates.as_posix(),  # type: ignore[attr-defined]  # pylint: disable=no-member\n        **variables,\n    )\n</code></pre>"},{"location":"reference/mapyde/utils/#mapyde.utils.slugify","title":"slugify","text":"<pre><code>slugify(value: str, allow_unicode: bool = False) -&gt; str\n</code></pre> <p>Taken from django utils.</p> <ul> <li>Convert to ASCII if <code>allow_unicode</code> is False.</li> <li>Convert spaces or repeated dashes to single dashes.</li> <li>Remove characters that aren't alphanumerics, underscores, or hyphens.</li> <li>Convert to lowercase.</li> <li>Also strip leading and trailing whitespace, dashes, and underscores.</li> </ul> Source code in <code>src/mapyde/utils.py</code> <pre><code>def slugify(value: str, allow_unicode: bool = False) -&gt; str:\n    \"\"\"\n    Taken from [django utils](https://github.com/django/django/blob/master/django/utils/text.py).\n\n    - Convert to ASCII if `allow_unicode` is False.\n    - Convert spaces or repeated dashes to single dashes.\n    - Remove characters that aren't alphanumerics, underscores, or hyphens.\n    - Convert to lowercase.\n    - Also strip leading and trailing whitespace, dashes, and underscores.\n    \"\"\"\n    value = str(value)\n    if allow_unicode:\n        value = unicodedata.normalize(\"NFKC\", value)\n    else:\n        value = (\n            unicodedata.normalize(\"NFKD\", value)\n            .encode(\"ascii\", \"ignore\")\n            .decode(\"ascii\")\n        )\n    value = re.sub(r\"[^\\w\\s-]\", \"\", value.lower())\n    return re.sub(r\"[-\\s]+\", \"-\", value).strip(\"-_\")\n</code></pre>"},{"location":"reference/mapyde/backends/","title":"backends","text":""},{"location":"reference/mapyde/backends/#mapyde.backends","title":"backends","text":""},{"location":"reference/mapyde/backends/madgraph/","title":"madgraph","text":""},{"location":"reference/mapyde/backends/madgraph/#mapyde.backends.madgraph","title":"madgraph","text":"<p>Helpers for madgraph</p>"},{"location":"reference/mapyde/backends/madgraph/#mapyde.backends.madgraph.generate_mg5config","title":"generate_mg5config","text":"<pre><code>generate_mg5config(config: ImmutableConfig) -&gt; None\n</code></pre> <p>Helper for generating the madgraph configs. Replaces mg5creator.py.</p> Source code in <code>src/mapyde/backends/madgraph.py</code> <pre><code>def generate_mg5config(config: ImmutableConfig) -&gt; None:\n    \"\"\"\n    Helper for generating the madgraph configs. Replaces mg5creator.py.\n    \"\"\"\n    old_versions = [\"2.4.3\", \"2.3.3\"]\n    is_old_version = False\n    if any(version in config[\"madgraph\"][\"version\"] for version in old_versions):\n        is_old_version = True\n        log.warning(\"Old madgraph version detected: %s\", config[\"madgraph\"][\"version\"])\n\n    output_path = (\n        Path(config[\"base\"][\"path\"]).joinpath(config[\"base\"][\"output\"]).resolve()\n    )\n    output_path.mkdir(parents=True, exist_ok=True)\n\n    # Ensure pythia card exists\n    _pythia_card_path = Path(config[\"base\"][\"pythia_path\"]).joinpath(\n        config[\"pythia\"][\"card\"]\n    )\n    if not _pythia_card_path.exists():\n        log.error(\"%s does not exist.\", _pythia_card_path)\n        sys.exit(1)\n\n    # Controls whether to run Pythia8 or not\n    pythia_config_path = \"\"\n    pythia_onoff = \"OFF\"\n    if not config[\"pythia\"][\"skip\"]:\n        # Copy the pythia card\n        pythia_card_path = (\n            Path(config[\"base\"][\"pythia_path\"])\n            .joinpath(config[\"pythia\"][\"card\"])\n            .resolve()\n        )\n        new_pythia_card_path = output_path.joinpath(\"pythia_card.dat\")\n\n        # block below replaces a straightforward copy of pythia card to run area\n        with new_pythia_card_path.open(\"w\", encoding=\"utf-8\") as new_pythia_card:\n            with pythia_card_path.open(encoding=\"utf-8\") as pcard:\n                for line in pcard:\n                    # now handle specific pythia options.  can be refactored later to be more elegant.\n                    # really only turning MPI on/off at the moment\n                    if \"partonlevel:mpi\" in line and \"mpi\" in config[\"pythia\"]:\n                        if config[\"pythia\"][\"mpi\"] == \"on\":\n                            new_pythia_card.write(\"partonlevel:mpi = on\")\n                        elif config[\"pythia\"][\"mpi\"] == \"off\":\n                            new_pythia_card.write(\"partonlevel:mpi = off\")\n                        else:\n                            log.error(\n                                \"partonlevel:mpi can only be 'on' or 'off', not %s\",\n                                config[\"pythia\"][\"mpi\"],\n                            )\n                            sys.exit(1)\n                    else:\n                        new_pythia_card.write(line)\n\n            if \"additional_opts\" in config[\"pythia\"]:\n                new_pythia_card.write(\"\\n\")\n                new_pythia_card.write(config[\"pythia\"][\"additional_opts\"])\n\n        log.info(\"Pythia Card: %s\", new_pythia_card_path)\n        pythia_onoff = \"Pythia8\"\n        pythia_config_path = f\"/data/{new_pythia_card_path.name}\"\n\n    substitution = {\n        \"ecms\": float(config[\"madgraph\"][\"run\"][\"ecms\"]) / 2,\n        \"nevents\": int(config[\"madgraph\"][\"run\"][\"nevents\"]),\n        \"iseed\": int(config[\"madgraph\"][\"run\"][\"seed\"]),\n    }\n\n    masses = config[\"madgraph\"].get(\"masses\", {})\n    if any(key in masses for key in substitution):\n        msg = \"Particles cannot be named ecms, nevents, or iseed.\"\n        raise ValueError(msg)\n\n    # Update the param card\n    param_card_path = (\n        Path(config[\"base\"][\"param_path\"])\n        .joinpath(config[\"madgraph\"][\"paramcard\"])\n        .resolve()\n    )\n    new_param_card_path = output_path.joinpath(param_card_path.name)\n    log.info(\"Param Card: %s\", new_param_card_path)\n\n    # mass substitutions can be either of the form:\n    #\n    # &gt; MSLEP = 100\n    #\n    # where \"MSLEP\" is a placeholder mass string inside the param card that must be replaced with a number before running madgraph, or\n    #\n    # &gt; 1000011 = 100\n    #\n    # where 1000011 is the PDG ID of the particle that can already have a placeholder mass that we want to replace with the value specified in the toml file.\n    #\n    # the two different types of substitutions need to be handled differently.\n\n    param_card_read_text = param_card_path.read_text(encoding=\"utf-8\")\n\n    # do the second kind of substitution\n    masses_to_remove = []\n    for pdgid, mass in masses.items():\n        # avoid dealing with the templated replacement syntax here\n        try:\n            int(pdgid)  # force an exception for entries like \"MSLEP = 100\"\n\n            # figure out where the mass block is, so we only modify things in there\n            blockmassbegin = param_card_read_text.find(\"Block mass\")\n            blockmassend = param_card_read_text.find(\"Block\", blockmassbegin + 1)\n\n            # figure out where this specific particle is, within the block\n            pdgidloc = param_card_read_text.find(\n                \" \" + pdgid, blockmassbegin, blockmassend\n            )\n            pdgidloclineend = param_card_read_text.find(\"\\n\", pdgidloc)\n\n            # now rebuild the param card around the new mass\n            param_card_read_text = (\n                param_card_read_text[: pdgidloc + len(pdgid) + 2]\n                + \"   \"\n                + str(mass)\n                + param_card_read_text[pdgidloclineend:]\n            )\n\n            # note that we've already processed this mass so we can avoid doing it again later\n            masses_to_remove.append(pdgid)\n        # pylint: disable-next=bare-except\n        except:  # noqa: E722\n            # should throw a \"ValueError\", but I can't predict all the silly ways\n            # people may do templated substitution....\n            pass\n\n    # don't try to update masses that have already been dealt with above.\n    for pdgid in masses_to_remove:\n        masses.pop(pdgid)\n\n    # now do the first kind of substitution\n    substitution.update(masses)\n\n    log.info(\"The following values will be substituted in where possible:\")\n    for key, value in substitution.items():\n        log.info(\"    $%s = %s\", key, value)\n\n    new_param_card_path.write_text(\n        Template(param_card_read_text, undefined=StrictUndefined).render(substitution),\n        encoding=\"utf-8\",\n    )\n\n    # Update the run card\n    run_card_path = (\n        Path(config[\"base\"][\"run_path\"])\n        .joinpath(config[\"madgraph\"][\"run\"][\"card\"])\n        .resolve()\n    )\n    if is_old_version:\n        log.warning(\"Changing the run card due to old madgraph version.\")\n        run_card_path = run_card_path.parent.joinpath(\"default_LO_oldformat.dat\")\n    new_run_card_path = output_path.joinpath(run_card_path.name)\n    log.info(\"Run Card: %s\", new_run_card_path)\n\n    # -- first do global opts\n    new_run_card_path.write_text(\n        Template(\n            run_card_path.read_text(encoding=\"utf-8\"), undefined=StrictUndefined\n        ).render(substitution),\n        encoding=\"utf-8\",\n    )\n\n    # -- now specific opts.  may want to reverse this order at some point, and do the specific before global.\n    # Note: this will only work with options in the run card that contain a \"!\" in the line, indicating a comment at the end of the line.\n    run_options = {**config[\"madgraph\"][\"run\"].get(\"options\", {})}\n\n    # env = Environment()\n    # parsed_content = env.parse('my text here')\n    # tpl_variables = meta.find_undeclared_variables(parsed)\n\n    pattern = re.compile(\n        r\"^\\s*(?P&lt;value&gt;[^\\s]+)\\s*=\\s*(?P&lt;key&gt;[a-z_0-9]+)\\s*\\!.*$\", re.DOTALL\n    )\n    with in_place.InPlace(new_run_card_path) as fpointer:\n        for line in fpointer:\n            output = line\n            match = pattern.match(line)\n            if match:\n                groups = match.groupdict()\n                span = match.span(\"value\")\n                newvalue = str(run_options.pop(groups[\"key\"], groups[\"value\"]))\n                # update the line based on input from the user, default to what is in the file\n                output = line[: span[0]] + newvalue + line[span[1] :]\n                if newvalue != groups[\"value\"]:\n                    log.info(\n                        \"    replacing value for %s: %s -&gt; %s\",\n                        groups[\"key\"],\n                        groups[\"value\"],\n                        newvalue,\n                    )\n            fpointer.write(output)\n\n    unused_keys = list(run_options.keys())\n    if unused_keys:\n        log.error(\"Unused keys supplied by you: %s\", unused_keys)\n        raise KeyError(unused_keys[0])\n\n    new_proc_card_path = generate_proc_card(config, output_path)\n\n    # Create the madgraph configuration card\n    mgconfig_card_path = output_path.joinpath(config[\"madgraph\"][\"output\"])\n    log.info(\"MadGraph Config: %s\", mgconfig_card_path)\n\n    # Figure out the run_mode.  0=single core, 1=cluster, 2=multicore.\n    if config[\"madgraph\"][\"batch\"]:\n        run_mode = \"set run_mode 0\"  # we don't have MadGraph launch cluster jobs for us, we handle that ourselves.\n    elif int(config[\"madgraph\"][\"cores\"]) &gt; 0:\n        run_mode = f\"set run_mode 2\\nset nb_core {config['madgraph']['cores']}\"\n    else:\n        run_mode = f\"set run_mode 2\\nset nb_core {multiprocessing.cpu_count() / 2}\"\n\n    # figure out if running with madspin or not, and if so, put the card in the right place\n    madspin_onoff = \"OFF\"\n    madspin_config_path = \"\"\n    if not config[\"madspin\"][\"skip\"]:\n        # Copy the madspin card\n        madspin_card_path = (\n            Path(config[\"base\"][\"madspin_path\"])\n            .joinpath(config[\"madspin\"][\"card\"])\n            .resolve()\n        )\n        new_madspin_card_path = output_path.joinpath(\"madspin_card.dat\")\n\n        # block below replaces a straightforward copy of madspin card to run area,\n        # but allows us to modify the card according to config options\n        with new_madspin_card_path.open(\n            \"w\", encoding=\"utf-8\"\n        ) as new_madspin_card, madspin_card_path.open(encoding=\"utf-8\") as pcard:\n            for line in pcard:\n                # now handle specific madspin options.  can be refactored later\n                # to be more elegant. really only changing the spinmode at the moment\n                if \"set spinmode\" in line and \"spinmode\" in config[\"madspin\"]:\n                    new_madspin_card.write(\n                        f\"set spinmode {config['madspin']['spinmode']} \\n\"\n                    )\n                else:\n                    new_madspin_card.write(line)\n\n        log.info(\"MadSpin Card: %s\", new_madspin_card_path)\n        madspin_onoff = \"ON\"\n        madspin_config_path = f\"/data/{new_madspin_card_path.name}\"\n\n    mg5config = f\"\"\"\n{run_mode}\nlaunch PROC_madgraph\nmadspin={madspin_onoff}\nshower={pythia_onoff}\nreweight=OFF\n{madspin_config_path}\n/data/{new_param_card_path.name}\n/data/{new_run_card_path.name}\n{pythia_config_path}\nset iseed {config['madgraph']['run']['seed']}\ndone\n\"\"\"\n    if is_old_version:\n        mg5config = f\"\"\"\n{run_mode}\nlaunch PROC_madgraph\nmadspin={madspin_onoff}\nreweight=OFF\n{madspin_config_path}\n/data/{new_param_card_path.name}\n/data/{new_run_card_path.name}\ndone\n\"\"\"\n\n    with mgconfig_card_path.open(mode=\"w\", encoding=\"utf-8\") as fpointer:\n        # pylint: disable-next=consider-using-with\n        with new_proc_card_path.open(encoding=\"utf-8\") as proc_lines:\n            for proc_line in proc_lines:\n                if not proc_line.strip():\n                    continue\n                if proc_line.startswith(\"output\"):\n                    fpointer.write(\"output PROC_madgraph\\n\")\n                else:\n                    fpointer.write(proc_line)\n        fpointer.write(mg5config)\n</code></pre>"},{"location":"reference/mapyde/backends/madgraph/#mapyde.backends.madgraph.generate_proc_card","title":"generate_proc_card","text":"<pre><code>generate_proc_card(config: ImmutableConfig, output_path: Path) -&gt; Path\n</code></pre> <p>Helper for creating the madgraph process card through two options:</p> <ul> <li>specifying the path inside process_path for the card to copy over</li> <li>specifying the contents as part of the config to use to make the process card</li> </ul> <p>Examples:</p> user_existing-card.toml<pre><code>[madgraph.proc]\nname = \"isrslep\"\ncard = \"{{madgraph['proc']['name']}}\"\ncontents = false # (1)!\n</code></pre> <ol> <li>specifying <code>false</code> (default) for the <code>contents</code> option while including the path to the card is the way to copy the card <code>isrslep</code> from the process card directory that is configured.</li> </ol> user_on-the-fly.toml<pre><code>[madgraph.proc]\nname = \"isrslep\"\ncard = false\ncontents = \"\"\"\\\nimport model MSSM_SLHA2\ndefine lep = e- e+ mu- mu+ ta- ta+\ngenerate p p &gt; z, z &gt; lep lep\noutput -f\n\"\"\" # (1)!\n</code></pre> <ol> <li>specifying the full process card contents to use for the process card will generate a process card with the specified name instead of copying over <code>isrslep</code> from the process card directory.</li> </ol> Source code in <code>src/mapyde/backends/madgraph.py</code> <pre><code>def generate_proc_card(config: ImmutableConfig, output_path: Path) -&gt; Path:\n    \"\"\"\n    Helper for creating the madgraph process card through two options:\n\n      - specifying the path inside process_path for the card to copy over\n      - specifying the contents as part of the config to use to make the process card\n\n    Examples:\n\n    ``` toml title=\"user_existing-card.toml\"\n    [madgraph.proc]\n    name = \"isrslep\"\n    card = \"{{madgraph['proc']['name']}}\"\n    contents = false # (1)!\n    ```\n\n    1. specifying `false` (default) for the `contents` option while including the\n    path to the card is the way to copy the card `isrslep` from the process\n    card directory that is configured.\n\n    ``` toml title=\"user_on-the-fly.toml\"\n    [madgraph.proc]\n    name = \"isrslep\"\n    card = false\n    contents = \\\"\\\"\\\"\\\\\n    import model MSSM_SLHA2\n    define lep = e- e+ mu- mu+ ta- ta+\n    generate p p &gt; z, z &gt; lep lep\n    output -f\n    \\\"\\\"\\\" # (1)!\n    ```\n\n    1. specifying the full process card contents to use for the process card will\n    generate a process card with the specified name instead of copying over\n    `isrslep` from the process card directory.\n    \"\"\"\n\n    assert bool(config[\"madgraph\"][\"proc\"][\"card\"]) ^ bool(\n        config[\"madgraph\"][\"proc\"][\"contents\"]\n    ), \"Must specify either the Madgraph process card to copy or the contents to use to generate a Madgraph process card.\"\n\n    if config[\"madgraph\"][\"proc\"][\"contents\"]:\n        new_proc_card_path = output_path.joinpath(config[\"madgraph\"][\"proc\"][\"name\"])\n        new_proc_card_path.write_text(config[\"madgraph\"][\"proc\"][\"contents\"])\n    else:\n        # Copy the proc card\n        proc_card_path = (\n            Path(config[\"base\"][\"process_path\"])\n            .joinpath(config[\"madgraph\"][\"proc\"][\"card\"])\n            .resolve()\n        )\n        new_proc_card_path = output_path.joinpath(proc_card_path.name)\n        shutil.copyfile(proc_card_path, new_proc_card_path)\n\n    log.info(\"Process Card: %s\", new_proc_card_path)\n    return new_proc_card_path\n</code></pre>"}]}