{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mapyde","text":"CI/CD Docs Package Meta <p>MaPyDe stands for MadGraph-Pythia-Delphes which is a utility that allows one to run all of the various HEP toolings or chain them together and perform a quick analysis with the results, such as running CERN ATLAS SimpleAnalysis or pyhf.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Multiple backends supported<ul> <li> docker</li> <li> singularity</li> <li> apptainer</li> </ul> </li> <li>Easy configuration with sensible defaults</li> <li>Usable CLI relying on a single config file</li> </ul>"},{"location":"#license","title":"License","text":"<p>mapyde is distributed under the terms of the Apache 2.0 license.</p>"},{"location":"#navigation","title":"Navigation","text":"<p>Documentation for specific <code>MAJOR.MINOR</code> versions can be chosen by using the dropdown on the top of every page. The <code>dev</code> version reflects changes that have not yet been released.</p> <p>Also, desktop readers can use special keyboard shortcuts:</p> Keys Action <ul><li>, (comma)</li><li>p</li></ul> Navigate to the \"previous\" page <ul><li>. (period)</li><li>n</li></ul> Navigate to the \"next\" page <ul><li>/</li><li>s</li></ul> Display the search modal"},{"location":"install/","title":"Installation","text":""},{"location":"install/#pip","title":"pip","text":"<p>mapyde is available on PyPI and can be installed with pip.</p> <pre><code>pip install mapyde\n</code></pre> <p>Warning</p> <p>This method modifies the Python environment in which you choose to install. Consider instead using pipx or virtual environments to avoid dependency conflicts.</p>"},{"location":"install/#pipx","title":"pipx","text":"<p>pipx allows for the global installation of Python applications in isolated environments.</p> <pre><code>pipx install mapyde\n</code></pre>"},{"location":"install/#virtual-environment","title":"virtual environment","text":"<pre><code>python -m venv venv\nsource venv/bin/activate\npython -m pip install mapyde\n</code></pre>"},{"location":"install/#conda","title":"Conda","text":"<p>See the feedstock for more details.</p> <pre><code>conda install -c conda-forge mapyde\n</code></pre> <p>or with mamba:</p> <pre><code>mamba install mapyde\n</code></pre> <p>Warning</p> <p>This method modifies the Conda environment in which you choose to install. Consider instead using pipx or condax to avoid dependency conflicts.</p>"},{"location":"intro/","title":"Introduction","text":""},{"location":"intro/#configuration","title":"Configuration","text":"<p>All project-specific configuration recognized by mapyde can be defined in a custom <code>user.toml</code>:</p>  default ewkinos sleptons <pre><code>[base]\npath = \"/data/users/{{USER}}/SUSY\"\noutput = \"mytag\"\ntemplate = \"{{MAPYDE_TEMPLATES}}/defaults.toml\"\n\n[madgraph.proc]\nname = \"charginos\"\ncard = \"{{madgraph['proc']['name']}}\"\n\n[madgraph.masses]\nMN1 = 100\nMC1 = 150\n</code></pre> <pre><code>[base]\npath = \"/data/users/{{USER}}/SUSY\"\noutput = \"mytag\"\ntemplate = \"{{MAPYDE_TEMPLATES}}/ewkinos.toml\"\n\n[madgraph.proc]\nname = \"isr2L\"\ncard = \"{{madgraph['proc']['name']}}\"\n\n[madgraph.masses]\nMN2 = 250\nMC1 = 250\nMN1 = 240\n</code></pre> <pre><code>[base]\npath = \"/data/users/{{USER}}/SUSY\"\noutput = \"mytag\"\ntemplate = \"{{MAPYDE_TEMPLATES}}/sleptons.toml\"\n\n[madgraph.proc]\nname = \"isrslep\"\ncard = \"{{madgraph['proc']['name']}}\"\n\n[madgraph.masses]\nMSLEP = 250\nMN1 = 240\n</code></pre> <p>Tip</p> <p>This is all highly customizable with the usage of templates to make it easier to inherit a convenient set of defaults for which you can override.</p>"},{"location":"cli/about/","title":"About","text":""},{"location":"cli/reference/","title":"Reference","text":""},{"location":"cli/reference/#mapyde","title":"mapyde","text":"<p>Manage top-level options</p> <p>Usage:</p> <pre><code>mapyde [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --version                       Print the current version.\n  --prefix [data|cards|likelihoods|scripts|templates]\n                                  Print the path prefix for data files.\n  --install-completion [bash|zsh|fish|powershell|pwsh]\n                                  Install completion for the specified shell.\n  --show-completion [bash|zsh|fish|powershell|pwsh]\n                                  Show completion for the specified shell, to\n                                  copy it or customize the installation.\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-config","title":"mapyde config","text":"<p>Usage:</p> <pre><code>mapyde config [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-config-generate-mg5","title":"mapyde config generate-mg5","text":"<p>Generate the madgraph configurations and write to local disk.</p> <p>Usage:</p> <pre><code>mapyde config generate-mg5 [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-config-parse","title":"mapyde config parse","text":"<p>Parse the configuration file and print to screen.</p> <p>Usage:</p> <pre><code>mapyde config parse [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run","title":"mapyde run","text":"<p>Usage:</p> <pre><code>mapyde run [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-all","title":"mapyde run all","text":"<p>Run madgraph, delphes, analysis, and pyhf.</p> <p>Usage:</p> <pre><code>mapyde run all [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-analysis","title":"mapyde run analysis","text":"<p>Run analysis.</p> <p>Usage:</p> <pre><code>mapyde run analysis [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-delphes","title":"mapyde run delphes","text":"<p>Run delphes.</p> <p>Usage:</p> <pre><code>mapyde run delphes [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-madgraph","title":"mapyde run madgraph","text":"<p>Run madgraph.</p> <p>Usage:</p> <pre><code>mapyde run madgraph [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-pyhf","title":"mapyde run pyhf","text":"<p>Run pyhf.</p> <p>Usage:</p> <pre><code>mapyde run pyhf [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-root2hdf5","title":"mapyde run root2hdf5","text":"<p>Transform from .root to .hdf5 format.</p> <p>Usage:</p> <pre><code>mapyde run root2hdf5 [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-sa2json","title":"mapyde run sa2json","text":"<p>Run sa2json.</p> <p>Usage:</p> <pre><code>mapyde run sa2json [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-sherpa","title":"mapyde run sherpa","text":"<p>Run Sherpa.</p> <p>Usage:</p> <pre><code>mapyde run sherpa [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"cli/reference/#mapyde-run-simpleanalysis","title":"mapyde run simpleanalysis","text":"<p>Run simpleanalysis (ATLAS tool)</p> <p>Usage:</p> <pre><code>mapyde run simpleanalysis [OPTIONS] FILENAME\n</code></pre> <p>Options:</p> <pre><code>  FILENAME  [required]\n  --help    Show this message and exit.\n</code></pre>"},{"location":"meta/authors/","title":"Authors","text":""},{"location":"meta/authors/#maintainers","title":"Maintainers","text":"<ul> <li>Mike Hance  </li> <li>Giordon Stark  </li> </ul>"},{"location":"meta/authors/#contributors","title":"Contributors","text":"<ul> <li>Be Our First!</li> </ul>"},{"location":"meta/faq/","title":"FAQ","text":""},{"location":"meta/faq/#backends","title":"Backends","text":"<p>Q: What backends do you support?</p> <p>A: So far: singularity, apptainer, and docker.</p>"},{"location":"meta/faq/#potpourri","title":"Potpourri","text":"<p>Q: Why is the FAQ empty?</p> <p>A: We're still working on fleshing it out. Check back soon. In the meantime, open a discussion or file an issue.</p>"},{"location":"reference/mapyde/","title":"mapyde","text":""},{"location":"reference/mapyde/#mapyde","title":"mapyde","text":"<p>Copyright \u00a9 2022 Michael Hance and Giordon Stark. All rights reserved.</p> <p>mapyde: A great package.</p>"},{"location":"reference/mapyde/container/","title":"container","text":""},{"location":"reference/mapyde/container/#mapyde.container","title":"container","text":"<p>Core Container functionality for managing OCI images.</p>"},{"location":"reference/mapyde/container/#mapyde.container.Container","title":"Container","text":"<pre><code>Container(*, image: str, user: int | None = None, group: int | None = None, mounts: list[tuple[PathOrStr, PathOrStr]] | None = None, cwd: PathOrStr | None = '/tmp', engine: ContainerEngine = 'docker', name: str | None = None, stdout: T.IO[bytes] | T.IO[str] | None = None, output_path: Path | None = None, logs_path: PathOrStr | None = None, additional_options: list[str] | None = None)\n</code></pre> <p>An object that represents a running OCI container.</p> Source code in <code>src/mapyde/container.py</code> <pre><code>def __init__(\nself,\n*,\nimage: str,\nuser: int | None = None,\ngroup: int | None = None,\nmounts: list[tuple[PathOrStr, PathOrStr]] | None = None,\ncwd: PathOrStr | None = \"/tmp\",\nengine: ContainerEngine = \"docker\",\nname: str | None = None,\nstdout: T.IO[bytes] | T.IO[str] | None = None,\noutput_path: Path | None = None,\nlogs_path: PathOrStr | None = None,\nadditional_options: list[str] | None = None,\n):\nif not image:\nmsg = \"Must specify an image to run.\"\nraise ValueError(msg)\ntry:\nsubprocess.run([\"bash\", \"-c\", f\"hash {engine}\"], check=True)\nexcept subprocess.CalledProcessError as err:\nmsg = f\"{engine} does not exist on your system.\"\nraise OSError(msg) from err\nself.image = image\nself.user = user or os.geteuid()\nself.group = group or os.getegid()\nself.mounts = mounts or []\nself.cwd = cwd\nself.engine = engine\nself.name = name\nself.stdin_config = subprocess.PIPE\nself.stdout_config = stdout or subprocess.PIPE\nself.stderr_config = subprocess.STDOUT\nself.output_path = (output_path or Path()).resolve()\nself.logs_path = logs_path\nself.additional_options = additional_options or []\nself.output_path.mkdir(parents=True, exist_ok=True)\nfor host, container in self.mounts:\nif not Path(container).is_absolute():\nmsg = f\"The mount {host}:{container} does not point to an absolute path in the container.\"\nraise ValueError(msg)\n</code></pre>"},{"location":"reference/mapyde/container/#mapyde.container.Container.call","title":"call","text":"<pre><code>call(args: bytes, cwd: PathOrStr | None = None, env: dict[str, str] | None = None) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Execute the provided command in the container. A smarter version of Container.process.communicate(args).</p> <p>Optionally change the current working directory (cwd) and set some environment variables.</p> Source code in <code>src/mapyde/container.py</code> <pre><code>def call(\nself,\nargs: bytes,\ncwd: PathOrStr | None = None,\nenv: dict[str, str] | None = None,\n) -&gt; tuple[bytes, bytes]:\n\"\"\"\n    Execute the provided command in the container. A smarter version of Container.process.communicate(args).\n    Optionally change the current working directory (cwd) and set some environment variables.\n    \"\"\"\nif cwd is None:\ncwd = self.cwd\nchdir = \"\"\nif cwd:\n# singularity/apptainer mount host $TMPDIR into /tmp which might be\n# unexpectedly full of files so make an empty temporary directory\nchdir = \"cd $(mktemp -d)\" if cwd == \"/tmp\" else f\"cd {cwd}\"\nenv_assignments = (\n\" \".join(f\"{shlex.quote(k)}={shlex.quote(v)}\" for k, v in env.items())\nif env is not None\nelse \"\"\n)\ncommand = bytes(\nf\"\"\"{chdir}\n            env {env_assignments} {args.decode()}\n            \"\"\",\n\"utf-8\",\n)\nreturn self.process.communicate(command)\n</code></pre>"},{"location":"reference/mapyde/prefix/","title":"prefix","text":""},{"location":"reference/mapyde/prefix/#mapyde.prefix","title":"prefix","text":"<p>Copyright \u00a9 2022 Michael Hance and Giordon Stark. All rights reserved.</p>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix","title":"Prefix","text":"<p>         Bases: <code>sys.modules[__name__].__class__</code></p> <p>A module-level wrapper around :mod:<code>mapyde</code> which will provide the prefixes</p> <p>.. rubric:: Example (callable)</p> <p>.. code-block:: pycon</p> <pre><code>&gt;&gt;&gt; import mapyde.prefix\n&gt;&gt;&gt; import pathlib\n&gt;&gt;&gt; curr_path = mapyde.prefix.data\n&gt;&gt;&gt; curr_path  # doctest: +ELLIPSIS\nPosixPath('.../pyhf/schemas')\n&gt;&gt;&gt; new_path = pathlib.Path(\"/home/root/my/new/path\")\n&gt;&gt;&gt; mapyde.prefix(new_path)  # doctest: +ELLIPSIS\n&lt;module 'mapyde.prefix' from ...&gt;\n&gt;&gt;&gt; mapyde.prefix.data\nPosixPath('/home/root/my/new/path')\n&gt;&gt;&gt; mapyde.prefix(curr_path)  # doctest: +ELLIPSIS\n&lt;module 'mapyde.prefix' from ...&gt;\n&gt;&gt;&gt; mapyde.prefix.data  # doctest: +ELLIPSIS\nPosixPath('.../pyhf/schemas')\n</code></pre> <p>.. rubric:: Example (context-manager)</p> <p>.. code-block:: pycon</p> <pre><code>&gt;&gt;&gt; import mapyde.prefix\n&gt;&gt;&gt; import pathlib\n&gt;&gt;&gt; curr_path = mapyde.prefix.data\n&gt;&gt;&gt; curr_path  # doctest: +ELLIPSIS\nPosixPath('.../pyhf/schemas')\n&gt;&gt;&gt; new_path = pathlib.Path(\"/home/root/my/new/path\")\n&gt;&gt;&gt; with mapyde.prefix(new_path):\n...     print(repr(mapyde.prefix.data))\n...\nPosixPath('/home/root/my/new/path')\n&gt;&gt;&gt; mapyde.prefix.data  # doctest: +ELLIPSIS\nPosixPath('.../pyhf/schemas')\n</code></pre>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix.cards","title":"cards  <code>property</code> <code>writable</code>","text":"<pre><code>cards: Path\n</code></pre> <p>The local path for cards.</p>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix.data","title":"data  <code>property</code> <code>writable</code>","text":"<pre><code>data: Path\n</code></pre> <p>The local path for data.</p>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix.likelihoods","title":"likelihoods  <code>property</code> <code>writable</code>","text":"<pre><code>likelihoods: Path\n</code></pre> <p>The local path for likelihoods.</p>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix.scripts","title":"scripts  <code>property</code> <code>writable</code>","text":"<pre><code>scripts: Path\n</code></pre> <p>The local path for scripts.</p>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix.templates","title":"templates  <code>property</code> <code>writable</code>","text":"<pre><code>templates: Path\n</code></pre> <p>The local path for templates.</p>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix.__call__","title":"__call__","text":"<pre><code>__call__(new_path: PathOrStr) -&gt; Self\n</code></pre> <p>Change the local search path for finding data locally.</p> <p>Parameters:</p> Name Type Description Default <code>new_path</code> <code>pathlib.Path</code> <p>Path to folder containing the data</p> required <p>Returns:</p> Name Type Description <code>self</code> <code>mapyde.prefix.Prefix</code> <p>Returns itself (for contextlib management)</p> Source code in <code>src/mapyde/prefix.py</code> <pre><code>def __call__(self, new_path: PathOrStr) -&gt; Self:\n\"\"\"\n    Change the local search path for finding data locally.\n    Args:\n        new_path (pathlib.Path): Path to folder containing the data\n    Returns:\n        self (mapyde.prefix.Prefix): Returns itself (for contextlib management)\n    \"\"\"\nself._orig_path, self.data = self.data, Path(new_path)\nreturn self\n</code></pre>"},{"location":"reference/mapyde/prefix/#mapyde.prefix.Prefix.__exit__","title":"__exit__","text":"<pre><code>__exit__(*args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Reset the local data path for cards locally.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>src/mapyde/prefix.py</code> <pre><code>def __exit__(self, *args: Any, **kwargs: Any) -&gt; None:\n\"\"\"\n    Reset the local data path for cards locally.\n    Returns:\n        None\n    \"\"\"\nself.data = self._orig_path\n</code></pre>"},{"location":"reference/mapyde/runner/","title":"runner","text":""},{"location":"reference/mapyde/runner/#mapyde.runner","title":"runner","text":"<p>File containing functionality for running the various steps in the workflow.</p>"},{"location":"reference/mapyde/runner/#mapyde.runner.dumpconfig","title":"dumpconfig","text":"<pre><code>dumpconfig(config: ImmutableConfig) -&gt; None\n</code></pre> <p>Dump configuration files used to do stuff, useful for debugging config issues after the fact</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def dumpconfig(config: ImmutableConfig) -&gt; None:\n\"\"\"\n    Dump configuration files used to do stuff, useful for debugging config issues after the fact\n    \"\"\"\noutput_path = (\nPath(config[\"base\"][\"path\"])\n.joinpath(config[\"base\"][\"output\"])\n.joinpath(\"configs\")\n.resolve()\n)\noutput_path.mkdir(parents=True, exist_ok=True)\nnow = datetime.now()\nwith utils.output_path(config).joinpath(\nf\"configs/config_{now.year}{now.month}{now.day}{now.hour}{now.minute}{now.second}.json\"\n).open(\n\"w\",\nencoding=\"utf-8\",\n) as outfile:\njson.dump(config, outfile, ensure_ascii=False, indent=4)\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.mounts","title":"mounts","text":"<pre><code>mounts(config: ImmutableConfig) -&gt; list[tuple[PathOrStr, PathOrStr]]\n</code></pre> <p>define mount points for all containers</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def mounts(config: ImmutableConfig) -&gt; list[tuple[PathOrStr, PathOrStr]]:\n\"\"\"\n    define mount points for all containers\n    \"\"\"\nreturn [\n(str(Path(config[\"base\"][\"cards_path\"]).resolve()), \"/cards\"),\n(str(Path(config[\"base\"][\"scripts_path\"]).resolve()), \"/scripts\"),\n(str(Path(config[\"base\"][\"likelihoods_path\"]).resolve()), \"/likelihoods\"),\n(str(utils.output_path(config)), \"/data\"),\n]\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_ana","title":"run_ana","text":"<pre><code>run_ana(config: ImmutableConfig) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Run analysis.</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_ana(config: ImmutableConfig) -&gt; tuple[bytes, bytes]:\n\"\"\"\n    Run analysis.\n    \"\"\"\nxsec = 1000.0\nif config[\"analysis\"][\"XSoverride\"] &gt; 0:\nxsec = config[\"analysis\"][\"XSoverride\"]\nelse:\nif (\n\"run_without_decays\" in config[\"madgraph\"]\nand config[\"madgraph\"][\"run_without_decays\"]\n):\n# modify config to access XS from run without decays\norigcard = config[\"madgraph\"][\"proc\"][\"card\"]\norigout = config[\"base\"][\"output\"]\nconfig[\"madgraph\"][\"proc\"][\"card\"] = (\nconfig[\"madgraph\"][\"proc\"][\"card\"] + \"_nodecays\"\n)\nconfig[\"base\"][\"output\"] = config[\"base\"][\"output\"] + \"_nodecays\"\nwith utils.output_path(config).joinpath(\nconfig[\"base\"][\"logs\"], \"docker_mgpy.log\"\n).open(encoding=\"utf-8\") as fpointer:\nfor line in fpointer.readlines():\n# TODO: can we flip this logic around to be better?\n# refactor into a parse_xsec utility or something?\nif \"Cross-section :\" in line:\nxsec = float(line.split()[2])  # take the last instance\n# change config options back\nconfig[\"madgraph\"][\"proc\"][\"card\"] = origcard\nconfig[\"base\"][\"output\"] = origout\n# if we're doing MLM matching and not trusting the final XS output by Pythia, then\n# fix the XS from before decays to account for matching efficiency\nif config[\"madgraph\"][\"run\"][\"options\"][\"xqcut\"] &gt; 0:\nwith utils.output_path(config).joinpath(\nconfig[\"base\"][\"logs\"], \"docker_mgpy.log\"\n).open(encoding=\"utf-8\") as fpointer:\nfor line in fpointer.readlines():\nif \"Nb of events after merging\" in line:\nxsec *= (\nfloat(line.split()[6]) / config[\"madgraph\"][\"nevents\"]\n)  # take the last instance\nelif (\nconfig[\"madspin\"][\"skip\"] is False\nand \"branchingratio\" in config[\"analysis\"]\nand config[\"analysis\"][\"branchingratio\"] &gt; 0\n):\n# we've run madspin AND set a non-zero BR in the configuration, so we're going\n# to take the cross section from before madspin runs.\nwith utils.output_path(config).joinpath(\nconfig[\"base\"][\"logs\"], \"docker_mgpy.log\"\n).open(encoding=\"utf-8\") as fpointer:\nfor line in fpointer.readlines():\n# TODO: can we flip this logic around to be better?\n# refactor into a parse_xsec utility or something?\nif \"Cross-section :\" in line:\nxsec = float(line.split()[2])  # take the first instance\nbreak\n# if we're doing MLM matching and not trusting the final XS output by Pythia, then\n# fix the XS from before decays to account for matching efficiency\nif config[\"madgraph\"][\"run\"][\"options\"][\"xqcut\"] &gt; 0:\nwith utils.output_path(config).joinpath(\nconfig[\"base\"][\"logs\"], \"docker_mgpy.log\"\n).open(encoding=\"utf-8\") as fpointer:\nfor line in fpointer.readlines():\nif \"Nb of events after merging\" in line:\nxsec *= (\nfloat(line.split()[6]) / config[\"madgraph\"][\"nevents\"]\n)  # take the last instance\nelse:\nwith utils.output_path(config).joinpath(\nconfig[\"base\"][\"logs\"], \"docker_mgpy.log\"\n).open(encoding=\"utf-8\") as fpointer:\nfor line in fpointer.readlines():\n# TODO: can we flip this logic around to be better?\n# refactor into a parse_xsec utility or something?\nif config[\"madgraph\"][\"run\"][\"options\"][\"xqcut\"] &gt; 0:\nif \"Matched cross-section :\" in line:\nxsec = float(line.split()[3])  # take the last instance\nelse:\nif \"Cross-section :\" in line:\nxsec = float(line.split()[2])  # take the last instance\nif \"branchingratio\" in config[\"analysis\"]:\nxsec *= config[\"analysis\"][\"branchingratio\"]\nif config[\"analysis\"][\"kfactor\"] &gt; 0:\nxsec *= config[\"analysis\"][\"kfactor\"]\nimage = f\"ghcr.io/scipp-atlas/mapyde/{config['delphes']['version']}\"\ncommand = bytes(\nf\"\"\"mkdir -p {Path(config['analysis']['output']).parent} &amp;&amp; \\\n/scripts/{config['analysis']['script']} --input {Path('/data').joinpath(config['delphes']['output'])} \\\n                                        --output {config['analysis']['output']} \\\n                                        --lumi {config['analysis']['lumi']} \\\n                                        --XS {xsec} &amp;&amp; \\\nrsync -rav . /data/\"\"\",\n\"utf-8\",\n)\nwith Container(\nimage=image,\nname=f\"{config['base']['output']}__hists\",\nengine=config[\"base\"].get(\"engine\", \"docker\"),\nmounts=mounts(config),\nstdout=sys.stdout,\noutput_path=utils.output_path(config),\nlogs_path=config[\"base\"][\"logs\"],\n) as container:\nstdout, stderr = container.call(command)\nreturn stdout, stderr\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_delphes","title":"run_delphes","text":"<pre><code>run_delphes(config: ImmutableConfig) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Run delphes.</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_delphes(config: ImmutableConfig) -&gt; tuple[bytes, bytes]:\n\"\"\"\n    Run delphes.\n    \"\"\"\n# ./test/wrapper_delphes.py config_file\nimage = f\"ghcr.io/scipp-atlas/mapyde/{config['delphes']['version']}\"\ncommand = bytes(\nf\"\"\"pwd &amp;&amp; ls -lavh &amp;&amp; ls -lavh /data &amp;&amp; \\\nfind /data/madgraph -name \"*hepmc.gz\" &amp;&amp; \\\ncp $(find /data/madgraph -name \"*hepmc.gz\") hepmc.gz &amp;&amp; \\\ngunzip -f hepmc.gz &amp;&amp; \\\ncp /cards/delphes/{config['delphes']['card']} . &amp;&amp; \\\n/bin/ls -ltrh --color &amp;&amp; \\\nmkdir -p {Path(config['delphes']['output']).parent} &amp;&amp; \\\nset -x &amp;&amp; \\\n/usr/local/share/delphes/delphes/DelphesHepMC2 {config['delphes']['card']} {Path(config['delphes']['output'])} hepmc &amp;&amp; \\\nset +x &amp;&amp; \\\nrsync -rav --exclude hepmc . /data/\"\"\",\n\"utf-8\",\n)\nwith Container(\nimage=image,\nname=f\"{config['base']['output']}__delphes\",\nengine=config[\"base\"].get(\"engine\", \"docker\"),\nmounts=mounts(config),\nstdout=sys.stdout,\noutput_path=utils.output_path(config),\nlogs_path=config[\"base\"][\"logs\"],\n) as container:\nstdout, stderr = container.call(command)\nreturn stdout, stderr\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_madgraph","title":"run_madgraph","text":"<pre><code>run_madgraph(config: ImmutableConfig) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Run madgraph.</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_madgraph(config: ImmutableConfig) -&gt; tuple[bytes, bytes]:\n\"\"\"\n    Run madgraph.\n    \"\"\"\n# in some cases we'll need to run MG once to get a XS, e.g. without decays, and then run again with the \"real\" proc card.\nif (\n\"run_without_decays\" in config[\"madgraph\"]\nand config[\"madgraph\"][\"run_without_decays\"]\n):\n# modify config to run without decays and store in a separate area\norigcard = config[\"madgraph\"][\"proc\"][\"card\"]\norigout = config[\"base\"][\"output\"]\norigpythia = config[\"pythia\"][\"skip\"]\nconfig[\"madgraph\"][\"proc\"][\"card\"] = (\nconfig[\"madgraph\"][\"proc\"][\"card\"] + \"_nodecays\"\n)\nconfig[\"base\"][\"output\"] = config[\"base\"][\"output\"] + \"_nodecays\"\nconfig[\"pythia\"][\"skip\"] = True\nmadgraph.generate_mg5config(config)\nimage = f\"ghcr.io/scipp-atlas/mapyde/{config['madgraph']['version']}\"\ncommand = bytes(\nf\"mg5_aMC /data/{config['madgraph']['output']} &amp;&amp; rsync -a PROC_madgraph /data/madgraph\\n\",\n\"utf-8\",\n)\nwith Container(\nimage=image,\nname=f\"{config['base']['output']}__mgpy\",\nengine=config[\"base\"].get(\"engine\", \"docker\"),\nmounts=mounts(config),\nstdout=sys.stdout,\noutput_path=utils.output_path(config),\nlogs_path=config[\"base\"][\"logs\"],\n) as container:\nstdout, stderr = container.call(command)\n# change config options back\nconfig[\"madgraph\"][\"proc\"][\"card\"] = origcard\nconfig[\"base\"][\"output\"] = origout\nconfig[\"pythia\"][\"skip\"] = origpythia\nmadgraph.generate_mg5config(config)\nimage = f\"ghcr.io/scipp-atlas/mapyde/{config['madgraph']['version']}\"\ncommand = bytes(\nf\"mg5_aMC /data/{config['madgraph']['output']} &amp;&amp; rsync -a PROC_madgraph /data/madgraph\\n\",\n\"utf-8\",\n)\nif config[\"madgraph\"].get(\"keep_output\", False):\ncommand = bytes(\nf\"mg5_aMC /data/{config['madgraph']['output']} &amp;&amp; \\\nmkdir -p /data/madgraph &amp;&amp; \\\nrsync -a PROC_madgraph/Events/run_01/unweighted_events.lhe.gz /data/madgraph/ &amp;&amp; \\\nrsync -a PROC_madgraph/Events/run_01/tag_1_pythia8_events.hepmc.gz /data/madgraph/ \\n\",\n\"utf-8\",\n)\nwith Container(\nimage=image,\nname=f\"{config['base']['output']}__mgpy\",\nengine=config[\"base\"].get(\"engine\", \"docker\"),\nmounts=mounts(config),\nstdout=sys.stdout,\noutput_path=utils.output_path(config),\nlogs_path=config[\"base\"][\"logs\"],\n) as container:\nstdout, stderr = container.call(command)\nreturn stdout, stderr\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_pyhf","title":"run_pyhf","text":"<pre><code>run_pyhf(config: ImmutableConfig) -&gt; tuple[bytes, bytes, MutableConfig]\n</code></pre> <p>Run statistical inference via pyhf.</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_pyhf(\nconfig: ImmutableConfig,\n) -&gt; tuple[bytes, bytes, MutableConfig]:\n\"\"\"\n    Run statistical inference via pyhf.\n    \"\"\"\nassert config\nimage = f\"ghcr.io/scipp-atlas/mapyde/{config['pyhf']['image']}\"\ncommand = bytes(\nf\"\"\"python3.8 /scripts/muscan.py -b /likelihoods/{config['pyhf']['likelihood']} -s {config['sa2json']['output']} -n {config['base']['output']} {config['pyhf']['gpu-options']} {config['pyhf']['other-options']}\"\"\",\n\"utf-8\",\n)\ndumpconfig(config)\naddl_opts = None\nif \"-c\" not in config[\"pyhf\"][\"gpu-options\"]:\naddl_opts = [\"--gpus\", \"all\"]\nwith Container(\nimage=image,\nname=f\"{config['base']['output']}__muscan\",\nengine=config[\"base\"].get(\"engine\", \"docker\"),\nmounts=mounts(config),\nstdout=sys.stdout,\noutput_path=utils.output_path(config),\nlogs_path=config[\"base\"][\"logs\"],\ncwd=\"/data\",\nadditional_options=addl_opts,\n) as container:\nstdout, stderr = container.call(command)\nwith Path(config[\"base\"][\"path\"]).joinpath(\nconfig[\"base\"][\"output\"], \"muscan_results.json\"\n).open(encoding=\"utf-8\") as fpointer:\ndata = json.load(fpointer)\nreturn (\nstdout,\nstderr,\ndata,\n)\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_root2hdf5","title":"run_root2hdf5","text":"<pre><code>run_root2hdf5(config: ImmutableConfig) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Transform ROOT file to hdf5 format</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_root2hdf5(config: ImmutableConfig) -&gt; tuple[bytes, bytes]:\n\"\"\"\n    Transform ROOT file to hdf5 format\n    \"\"\"\nassert config\nimage = \"ghcr.io/scipp-atlas/mapyde/pyplotting:latest\"\ncommand = bytes(\nf\"\"\"python3 /scripts/root2hdf5.py {config['root2hdf5']['input']}:{config['root2hdf5']['treename']} \"\"\",\n\"utf-8\",\n)\nwith Container(\nimage=image,\nname=f\"{config['base']['output']}__root2hdf5\",\nengine=config[\"base\"].get(\"engine\", \"docker\"),\nmounts=mounts(config),\nstdout=sys.stdout,\noutput_path=utils.output_path(config),\nlogs_path=config[\"base\"][\"logs\"],\ncwd=\"/data\",\n) as container:\nstdout, stderr = container.call(command)\nreturn stdout, stderr\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_sa2json","title":"run_sa2json","text":"<pre><code>run_sa2json(config: ImmutableConfig) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Convert SA ROOT file to HiFa JSON.</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_sa2json(config: ImmutableConfig) -&gt; tuple[bytes, bytes]:\n\"\"\"\n    Convert SA ROOT file to HiFa JSON.\n    \"\"\"\nassert config\ninputstr = \"\"\nfor i in config[\"sa2json\"][\"inputs\"].split():  # pylint: disable=consider-using-join\ninputstr += f\" -i {i} \"  # pylint: disable=consider-using-join\nscalefactorstring = \"\"\nif \"hepmc\" in config[\"simpleanalysis\"][\"input\"]:\n# scale weights up by kfactor*br and down by number of generated events\nscalefactor = config[\"analysis\"][\"kfactor\"] / config[\"madgraph\"][\"nevents\"]\nscalefactorstring = f\"--scale {scalefactor}\"\nimage = f\"ghcr.io/scipp-atlas/mapyde/{config['sa2json']['image']}\"\ncommand = bytes(\nf\"\"\"python /scripts/SAtoJSON.py {inputstr} -o {config['sa2json']['output']} -n {config['base']['output']} -b /likelihoods/{config['pyhf']['likelihood']} -l {config['analysis']['lumi']} {config['sa2json']['options']} {scalefactorstring}\"\"\",\n\"utf-8\",\n)\nwith Container(\nimage=image,\nname=f\"{config['base']['output']}__SA2json\",\nengine=config[\"base\"].get(\"engine\", \"docker\"),\nmounts=mounts(config),\nstdout=sys.stdout,\noutput_path=utils.output_path(config),\nlogs_path=config[\"base\"][\"logs\"],\ncwd=\"/data\",\n) as container:\nstdout, stderr = container.call(command)\nreturn stdout, stderr\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_sherpa","title":"run_sherpa","text":"<pre><code>run_sherpa(config: ImmutableConfig) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Run sherpa.</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_sherpa(config: ImmutableConfig) -&gt; tuple[bytes, bytes]:\n\"\"\"\n    Run sherpa.\n    \"\"\"\noutput_path = (\nPath(config[\"base\"][\"path\"]).joinpath(config[\"base\"][\"output\"]).resolve()\n)\noutput_path.mkdir(parents=True, exist_ok=True)\nimage = \"sherpamc/sherpa:2.2.7\"\ncommand = bytes(\nf\"\"\"/bin/bash -c \"mkdir sherpa &amp;&amp; \\\ncd sherpa &amp;&amp; \\\ncp -p /cards/sherpa/{config['sherpa']['proc']} . &amp;&amp; \\\nls -ltrh &amp;&amp; \\\ncat {config['sherpa']['proc']} &amp;&amp; \\\nmpirun -n {config['sherpa']['cores']} Sherpa -f {config['sherpa']['proc']} -e {config['sherpa']['nevents']} &amp;&amp; \\\nmv sherpa.hepmc.hepmc2g sherpa.hepmc.gz &amp;&amp; \\\ncd ../ &amp;&amp; \\\ncp -a sherpa/ /data/\" \"\"\",\n\"utf-8\",\n)\nwith Container(\nimage=image,\nname=f\"{config['base']['output']}__sherpa\",\nengine=config[\"base\"].get(\"engine\", \"docker\"),\nmounts=mounts(config),\nstdout=sys.stdout,\noutput_path=utils.output_path(config),\nlogs_path=config[\"base\"][\"logs\"],\n) as container:\nstdout, stderr = container.call(command)\nreturn stdout, stderr\n</code></pre>"},{"location":"reference/mapyde/runner/#mapyde.runner.run_simpleanalysis","title":"run_simpleanalysis","text":"<pre><code>run_simpleanalysis(config: ImmutableConfig) -&gt; tuple[bytes, bytes]\n</code></pre> <p>Run SimpleAnalysis.</p> Source code in <code>src/mapyde/runner.py</code> <pre><code>def run_simpleanalysis(config: ImmutableConfig) -&gt; tuple[bytes, bytes]:\n\"\"\"\n    Run SimpleAnalysis.\n    \"\"\"\nimage = \"gitlab-registry.cern.ch/atlas-sa/simple-analysis:master\"\ncommand = bytes(\nf\"\"\"mkdir -p tmp_SA &amp;&amp; cd tmp_SA &amp;&amp; \\\n/opt/SimpleAnalysis/ci/entrypoint.sh simpleAnalysis -a {config['simpleanalysis']['name']} ../{config['analysis']['output']} -n &amp;&amp; \\\nmv {config['simpleanalysis']['name']}.root ../{config['simpleanalysis']['name']}{config['simpleanalysis']['outputtag']}.root &amp;&amp; \\\nmv {config['simpleanalysis']['name']}.txt ../{config['simpleanalysis']['name']}{config['simpleanalysis']['outputtag']}.txt &amp;&amp; \\\ncd ../ &amp;&amp; rm -rf tmp_SA\"\"\",\n\"utf-8\",\n)\nif (\n\"input\" in config[\"simpleanalysis\"]\nand \"hepmc\" in config[\"simpleanalysis\"][\"input\"]\n):\ncommand = bytes(\nf\"\"\"mkdir -p tmp_SA &amp;&amp; cd tmp_SA &amp;&amp; \\\nfind /data -name \"*hepmc.gz\" &amp;&amp; \\\ncp $(find /data/madgraph -name \"*hepmc.gz\") hepmc.gz &amp;&amp; \\\ngunzip -f hepmc.gz &amp;&amp; \\\n/opt/SimpleAnalysis/ci/entrypoint.sh simpleAnalysis -a {config['simpleanalysis']['name']} {config['simpleanalysis']['input']} -n &amp;&amp; \\\nmv {config['simpleanalysis']['name']}.root ../{config['simpleanalysis']['name']}{config['simpleanalysis']['outputtag']}.root &amp;&amp; \\\nmv {config['simpleanalysis']['name']}.txt ../{config['simpleanalysis']['name']}{config['simpleanalysis']['outputtag']}.txt &amp;&amp; \\\nrm hepmc &amp;&amp; \\\ncd ../ &amp;&amp; rm -rf tmp_SA\"\"\",\n\"utf-8\",\n)\nwith Container(\nimage=image,\nname=f\"{config['base']['output']}__simpleanalysis\",\nengine=config[\"base\"].get(\"engine\", \"docker\"),\nmounts=mounts(config),\nstdout=sys.stdout,\ncwd=\"/data\",\noutput_path=utils.output_path(config),\nlogs_path=config[\"base\"][\"logs\"],\n) as container:\nstdout, stderr = container.call(command)\nreturn stdout, stderr\n</code></pre>"},{"location":"reference/mapyde/typing/","title":"typing","text":""},{"location":"reference/mapyde/typing/#mapyde.typing","title":"typing","text":"<p>Typehint helpers.</p>"},{"location":"reference/mapyde/utils/","title":"utils","text":""},{"location":"reference/mapyde/utils/#mapyde.utils","title":"utils","text":"<p>Utilities for managing configuration.</p>"},{"location":"reference/mapyde/utils/#mapyde.utils.build_config","title":"build_config","text":"<pre><code>build_config(user: MutableConfig, depth: int = 0) -&gt; T.Any\n</code></pre> <p>Function to build a configuration from a user-provided toml configuration on top of the base/template one.</p> <p>The templates can be further nested (this function is recursive) up to a maximum (non-configurable) depth of 10.</p> Source code in <code>src/mapyde/utils.py</code> <pre><code>def build_config(user: MutableConfig, depth: int = 0) -&gt; T.Any:\n\"\"\"\n    Function to build a configuration from a user-provided toml configuration on top of the base/template one.\n    The templates can be further nested (this function is recursive) up to a maximum (non-configurable) depth of 10.\n    \"\"\"\ntemplate_str = user.get(\"base\", {}).pop(\n\"template\", str(prefix.templates / \"defaults.toml\")  # type: ignore[attr-defined]  # pylint: disable=no-member\n)\nparent = {}\nif template_str:\nif depth &gt;= 10:\nmsg = 'Maximum template depth (10) exceeded. This is likely due to your base template not having `\"template\" = false` set.'\nraise RuntimeError(msg)\ntemplate_path = Path(render_string(template_str))\nwith resources.as_file(template_path) as template:\nif not template.exists():\nmsg = f\"{template_path} does not exist.\"\nraise OSError(msg)\nparent = build_config(\nload_config(template.name, str(template.parent)), depth=depth + 1\n)\nvariables = merge(parent, user)\n# only render the entire merged configuration, not the intermediate ones\nreturn (\nvariables\nif depth\nelse tomllib.loads(render_string(tomli_w.dumps(variables), variables))\n)\n</code></pre>"},{"location":"reference/mapyde/utils/#mapyde.utils.env_override","title":"env_override","text":"<pre><code>env_override(value: T.Any, key: str) -&gt; T.Any\n</code></pre> <p>Helper function for jinja2 to override environment variables</p> Source code in <code>src/mapyde/utils.py</code> <pre><code>def env_override(value: T.Any, key: str) -&gt; T.Any:\n\"\"\"\n    Helper function for jinja2 to override environment variables\n    \"\"\"\nreturn os.getenv(key, value)\n</code></pre>"},{"location":"reference/mapyde/utils/#mapyde.utils.load_config","title":"load_config","text":"<pre><code>load_config(filename: str, cwd: str = '.') -&gt; T.Any\n</code></pre> <p>Helper function to load a local toml configuration by filename</p> Source code in <code>src/mapyde/utils.py</code> <pre><code>def load_config(filename: str, cwd: str = \".\") -&gt; T.Any:\n\"\"\"\n    Helper function to load a local toml configuration by filename\n    \"\"\"\nenv = Environment(loader=FileSystemLoader(cwd))\nenv.filters[\"env_override\"] = env_override\ntpl = env.get_template(filename)\nassert tpl.filename\nwith Path(tpl.filename).open(\"rb\") as fpointer:\nreturn tomllib.load(fpointer)\n</code></pre>"},{"location":"reference/mapyde/utils/#mapyde.utils.merge","title":"merge","text":"<pre><code>merge(left: MutableConfig, right: ImmutableConfig, path: list[str] | None = None) -&gt; ImmutableConfig\n</code></pre> <p>merges right dictionary into left dictionary</p> Source code in <code>src/mapyde/utils.py</code> <pre><code>def merge(\nleft: MutableConfig, right: ImmutableConfig, path: list[str] | None = None\n) -&gt; ImmutableConfig:\n\"\"\"\n    merges right dictionary into left dictionary\n    \"\"\"\nif path is None:\npath = []\nfor key in right:\nif key in left:\nif isinstance(left[key], dict) and isinstance(right[key], dict):\nmerge(left[key], right[key], [*path, str(key)])\nelse:\nleft[key] = right[key]\nelse:\nleft[key] = right[key]\nreturn left\n</code></pre>"},{"location":"reference/mapyde/utils/#mapyde.utils.output_path","title":"output_path","text":"<pre><code>output_path(config: ImmutableConfig) -&gt; Path\n</code></pre> <p>Return the output path from the config.</p> Source code in <code>src/mapyde/utils.py</code> <pre><code>def output_path(config: ImmutableConfig) -&gt; Path:\n\"\"\"\n    Return the output path from the config.\n    \"\"\"\nreturn Path(config[\"base\"][\"path\"]).joinpath(config[\"base\"][\"output\"]).resolve()\n</code></pre>"},{"location":"reference/mapyde/utils/#mapyde.utils.render_string","title":"render_string","text":"<pre><code>render_string(blob: str, variables: ImmutableConfig | None = None) -&gt; str\n</code></pre> <p>Render a string using various variables set by the mapyde package.</p> Source code in <code>src/mapyde/utils.py</code> <pre><code>def render_string(blob: str, variables: ImmutableConfig | None = None) -&gt; str:\n\"\"\"\n    Render a string using various variables set by the mapyde package.\n    \"\"\"\nvariables = variables or {}\ntpl = Template(blob)\nreturn tpl.render(\nPWD=Path(os.getenv(\"PWD\", \".\")).as_posix(),\nUSER=os.getenv(\"USER\", \"USER\"),\nMAPYDE_DATA=prefix.data.as_posix(),  # type: ignore[attr-defined]\nMAPYDE_CARDS=prefix.cards.as_posix(),  # type: ignore[attr-defined]  # pylint: disable=no-member\nMAPYDE_LIKELIHOODS=prefix.likelihoods.as_posix(),  # type: ignore[attr-defined]  # pylint: disable=no-member\nMAPYDE_SCRIPTS=prefix.scripts.as_posix(),  # type: ignore[attr-defined]  # pylint: disable=no-member\nMAPYDE_TEMPLATES=prefix.templates.as_posix(),  # type: ignore[attr-defined]  # pylint: disable=no-member\n**variables,\n)\n</code></pre>"},{"location":"reference/mapyde/utils/#mapyde.utils.slugify","title":"slugify","text":"<pre><code>slugify(value: str, allow_unicode: bool = False) -&gt; str\n</code></pre> <p>Taken from https://github.com/django/django/blob/master/django/utils/text.py Convert to ASCII if 'allow_unicode' is False. Convert spaces or repeated dashes to single dashes. Remove characters that aren't alphanumerics, underscores, or hyphens. Convert to lowercase. Also strip leading and trailing whitespace, dashes, and underscores.</p> Source code in <code>src/mapyde/utils.py</code> <pre><code>def slugify(value: str, allow_unicode: bool = False) -&gt; str:\n\"\"\"\n    Taken from https://github.com/django/django/blob/master/django/utils/text.py\n    Convert to ASCII if 'allow_unicode' is False. Convert spaces or repeated\n    dashes to single dashes. Remove characters that aren't alphanumerics,\n    underscores, or hyphens. Convert to lowercase. Also strip leading and\n    trailing whitespace, dashes, and underscores.\n    \"\"\"\nvalue = str(value)\nif allow_unicode:\nvalue = unicodedata.normalize(\"NFKC\", value)\nelse:\nvalue = (\nunicodedata.normalize(\"NFKD\", value)\n.encode(\"ascii\", \"ignore\")\n.decode(\"ascii\")\n)\nvalue = re.sub(r\"[^\\w\\s-]\", \"\", value.lower())\nreturn re.sub(r\"[-\\s]+\", \"-\", value).strip(\"-_\")\n</code></pre>"},{"location":"reference/mapyde/backends/","title":"backends","text":""},{"location":"reference/mapyde/backends/#mapyde.backends","title":"backends","text":""},{"location":"reference/mapyde/backends/madgraph/","title":"madgraph","text":""},{"location":"reference/mapyde/backends/madgraph/#mapyde.backends.madgraph","title":"madgraph","text":"<p>Helpers for madgraph</p>"},{"location":"reference/mapyde/backends/madgraph/#mapyde.backends.madgraph.generate_mg5config","title":"generate_mg5config","text":"<pre><code>generate_mg5config(config: ImmutableConfig) -&gt; None\n</code></pre> <p>Helper for generating the madgraph configs. Replaces mg5creator.py.</p> Source code in <code>src/mapyde/backends/madgraph.py</code> <pre><code>def generate_mg5config(config: ImmutableConfig) -&gt; None:\n\"\"\"\n    Helper for generating the madgraph configs. Replaces mg5creator.py.\n    \"\"\"\nold_versions = [\"2.4.3\", \"2.3.3\"]\nis_old_version = False\nif any(version in config[\"madgraph\"][\"version\"] for version in old_versions):\nis_old_version = True\nlog.warning(\"Old madgraph version detected: %s\", config[\"madgraph\"][\"version\"])\noutput_path = (\nPath(config[\"base\"][\"path\"]).joinpath(config[\"base\"][\"output\"]).resolve()\n)\noutput_path.mkdir(parents=True, exist_ok=True)\n# Ensure pythia card exists\n_pythia_card_path = Path(config[\"base\"][\"pythia_path\"]).joinpath(\nconfig[\"pythia\"][\"card\"]\n)\nif not _pythia_card_path.exists():\nlog.error(\"%s does not exist.\", _pythia_card_path)\nsys.exit(1)\n# Controls whether to run Pythia8 or not\npythia_config_path = \"\"\npythia_onoff = \"OFF\"\nif not config[\"pythia\"][\"skip\"]:\n# Copy the pythia card\npythia_card_path = (\nPath(config[\"base\"][\"pythia_path\"])\n.joinpath(config[\"pythia\"][\"card\"])\n.resolve()\n)\nnew_pythia_card_path = output_path.joinpath(\"pythia_card.dat\")\n# block below replaces a straightforward copy of pythia card to run area\nwith new_pythia_card_path.open(\"w\", encoding=\"utf-8\") as new_pythia_card:\nwith pythia_card_path.open(encoding=\"utf-8\") as pcard:\nfor line in pcard:\n# now handle specific pythia options.  can be refactored later to be more elegant.\n# really only turning MPI on/off at the moment\nif \"partonlevel:mpi\" in line and \"mpi\" in config[\"pythia\"]:\nif config[\"pythia\"][\"mpi\"] == \"on\":\nnew_pythia_card.write(\"partonlevel:mpi = on\")\nelif config[\"pythia\"][\"mpi\"] == \"off\":\nnew_pythia_card.write(\"partonlevel:mpi = off\")\nelse:\nlog.error(\n\"partonlevel:mpi can only be 'on' or 'off', not %s\",\nconfig[\"pythia\"][\"mpi\"],\n)\nsys.exit(1)\nelse:\nnew_pythia_card.write(line)\nif \"additional_opts\" in config[\"pythia\"]:\nnew_pythia_card.write(\"\\n\")\nnew_pythia_card.write(config[\"pythia\"][\"additional_opts\"])\nlog.info(\"Pythia Card: %s\", new_pythia_card_path)\npythia_onoff = \"Pythia8\"\npythia_config_path = f\"/data/{new_pythia_card_path.name}\"\nsubstitution = {\n\"ecms\": float(config[\"madgraph\"][\"run\"][\"ecms\"]) / 2,\n\"nevents\": int(config[\"madgraph\"][\"run\"][\"nevents\"]),\n\"iseed\": int(config[\"madgraph\"][\"run\"][\"seed\"]),\n}\nmasses = config[\"madgraph\"].get(\"masses\", {})\nif any(key in masses for key in substitution):\nmsg = \"Particles cannot be named ecms, nevents, or iseed.\"\nraise ValueError(msg)\nsubstitution.update(masses)\nlog.info(\"The following values will be substituted in where possible:\")\nfor key, value in substitution.items():\nlog.info(\"    $%s = %s\", key, value)\n# Update the param card\nparam_card_path = (\nPath(config[\"base\"][\"param_path\"])\n.joinpath(config[\"madgraph\"][\"paramcard\"])\n.resolve()\n)\nnew_param_card_path = output_path.joinpath(param_card_path.name)\nlog.info(\"Param Card: %s\", new_param_card_path)\nnew_param_card_path.write_text(\nTemplate(\nparam_card_path.read_text(encoding=\"utf-8\"), undefined=StrictUndefined\n).render(substitution),\nencoding=\"utf-8\",\n)\n# Update the run card\nrun_card_path = (\nPath(config[\"base\"][\"run_path\"])\n.joinpath(config[\"madgraph\"][\"run\"][\"card\"])\n.resolve()\n)\nif is_old_version:\nlog.warning(\"Changing the run card due to old madgraph version.\")\nrun_card_path = run_card_path.parent.joinpath(\"default_LO_oldformat.dat\")\nnew_run_card_path = output_path.joinpath(run_card_path.name)\nlog.info(\"Run Card: %s\", new_run_card_path)\n# -- first do global opts\nnew_run_card_path.write_text(\nTemplate(\nrun_card_path.read_text(encoding=\"utf-8\"), undefined=StrictUndefined\n).render(substitution),\nencoding=\"utf-8\",\n)\n# -- now specific opts.  may want to reverse this order at some point, and do the specific before global.\n# Note: this will only work with options in the run card that contain a \"!\" in the line, indicating a comment at the end of the line.\nrun_options = {**config[\"madgraph\"][\"run\"].get(\"options\", {})}\n# env = Environment()\n# parsed_content = env.parse('my text here')\n# tpl_variables = meta.find_undeclared_variables(parsed)\npattern = re.compile(\nr\"^\\s*(?P&lt;value&gt;[^\\s]+)\\s*=\\s*(?P&lt;key&gt;[a-z_0-9]+)\\s*\\!.*$\", re.DOTALL\n)\nwith in_place.InPlace(new_run_card_path) as fpointer:\nfor line in fpointer:\noutput = line\nmatch = pattern.match(line)\nif match:\ngroups = match.groupdict()\nspan = match.span(\"value\")\nnewvalue = str(run_options.pop(groups[\"key\"], groups[\"value\"]))\n# update the line based on input from the user, default to what is in the file\noutput = line[: span[0]] + newvalue + line[span[1] :]\nif newvalue != groups[\"value\"]:\nlog.info(\n\"    replacing value for %s: %s -&gt; %s\",\ngroups[\"key\"],\ngroups[\"value\"],\nnewvalue,\n)\nfpointer.write(output)\nunused_keys = list(run_options.keys())\nif unused_keys:\nlog.error(\"Unused keys supplied by you: %s\", unused_keys)\nraise KeyError(unused_keys[0])\n# Copy the proc card\nproc_card_path = (\nPath(config[\"base\"][\"process_path\"])\n.joinpath(config[\"madgraph\"][\"proc\"][\"card\"])\n.resolve()\n)\nnew_proc_card_path = output_path.joinpath(proc_card_path.name)\nlog.info(\"Process Card: %s\", new_proc_card_path)\nshutil.copyfile(proc_card_path, new_proc_card_path)\n# Create the madgraph configuration card\nmgconfig_card_path = output_path.joinpath(config[\"madgraph\"][\"output\"])\nlog.info(\"MadGraph Config: %s\", mgconfig_card_path)\n# Figure out the run_mode.  0=single core, 1=cluster, 2=multicore.\nif config[\"madgraph\"][\"batch\"]:\nrun_mode = \"set run_mode 0\"  # we don't have MadGraph launch cluster jobs for us, we handle that ourselves.\nelif int(config[\"madgraph\"][\"cores\"]) &gt; 0:\nrun_mode = f\"set run_mode 2\\nset nb_core {config['madgraph']['cores']}\"\nelse:\nrun_mode = f\"set run_mode 2\\nset nb_core {multiprocessing.cpu_count() / 2}\"\n# figure out if running with madspin or not, and if so, put the card in the right place\nmadspin_onoff = \"OFF\"\nmadspin_config_path = \"\"\nif not config[\"madspin\"][\"skip\"]:\n# Copy the madspin card\nmadspin_card_path = (\nPath(config[\"base\"][\"madspin_path\"])\n.joinpath(config[\"madspin\"][\"card\"])\n.resolve()\n)\nnew_madspin_card_path = output_path.joinpath(\"madspin_card.dat\")\n# block below replaces a straightforward copy of madspin card to run area,\n# but allows us to modify the card according to config options\nwith new_madspin_card_path.open(\n\"w\", encoding=\"utf-8\"\n) as new_madspin_card, madspin_card_path.open(encoding=\"utf-8\") as pcard:\nfor line in pcard:\n# now handle specific madspin options.  can be refactored later\n# to be more elegant. really only changing the spinmode at the moment\nif \"set spinmode\" in line and \"spinmode\" in config[\"madspin\"]:\nnew_madspin_card.write(\nf\"set spinmode {config['madspin']['spinmode']} \\n\"\n)\nelse:\nnew_madspin_card.write(line)\nlog.info(\"MadSpin Card: %s\", new_madspin_card_path)\nmadspin_onoff = \"ON\"\nmadspin_config_path = f\"/data/{new_madspin_card_path.name}\"\nmg5config = f\"\"\"\n{run_mode}\nlaunch PROC_madgraph\nmadspin={madspin_onoff}\nshower={pythia_onoff}\nreweight=OFF\n{madspin_config_path}\n/data/{new_param_card_path.name}\n/data/{new_run_card_path.name}\n{pythia_config_path}\nset iseed {config['madgraph']['run']['seed']}\ndone\n\"\"\"\nif is_old_version:\nmg5config = f\"\"\"\n{run_mode}\nlaunch PROC_madgraph\nmadspin={madspin_onoff}\nreweight=OFF\n{madspin_config_path}\n/data/{new_param_card_path.name}\n/data/{new_run_card_path.name}\ndone\n\"\"\"\nwith mgconfig_card_path.open(mode=\"w\", encoding=\"utf-8\") as fpointer:\n# pylint: disable-next=consider-using-with\nfor proc_line in new_proc_card_path.open(encoding=\"utf-8\"):\nif not proc_line.strip():\ncontinue\nif proc_line.startswith(\"output\"):\nfpointer.write(\"output PROC_madgraph\\n\")\nelse:\nfpointer.write(proc_line)\nfpointer.write(mg5config)\n</code></pre>"}]}