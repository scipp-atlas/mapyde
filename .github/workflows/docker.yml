name: Docker Images

on:
  push:
    branches:
    - main
    tags:
    - v*
  pull_request:
    branches:
    - main
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.filter.outputs.changed }}
      all_images: ${{ steps.set.outputs.all_images }}
      changed_images: ${{ steps.set.outputs.changed_images }}
      unchanged_images: ${{ steps.set.outputs.unchanged_images }}
    steps:
    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        list-files: json
        filters: |
          changed: Dockerfiles/**
    - uses: actions/checkout@v3
    - id: set
      run: |
        ALL_IMAGES=$(find Dockerfiles/ -type f | xargs -n1 basename | jq -R -s -c 'split("\n")[:-1]')
        echo "::set-output name=all_images::${ALL_IMAGES}"
        printf "Setting all_images=${ALL_IMAGES}\n"

        CHANGED_IMAGES=$(printf ${{ toJSON(steps.filter.outputs.changed_files) }}  | jq -c '.[] |= split("/")[1]')
        echo "::set-output name=changed_images::${CHANGED_IMAGES}"
        printf "Setting changed_images=${CHANGED_IMAGES}\n"

        UNCHANGED_IMAGES=$(jq -n -c --argjson all_images ${ALL_IMAGES} --argjson changed_images ${CHANGED_IMAGES} '$all_images-$changed_images')
        echo "::set-output name=unchanged_images::${UNCHANGED_IMAGES}"
        printf "Setting unchanged_images=${UNCHANGED_IMAGES}\n"

  build:
    name: Build ${{ matrix.image }}
    needs: [changes]
    if: ${{ needs.changes.outputs.changed == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJSON(needs.changes.outputs.changed_images) }}
    steps:
      - uses: actions/checkout@v3
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE="ghcr.io/${{github.repository}}/${{ matrix.image }}"
          TAGS="${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="$TAGS,${DOCKER_IMAGE}:${VERSION}"
          # Releases also have GITHUB_REFs that are tags, so reuse VERSION
          if [ "${{ github.event_name }}" = "release" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest-stable"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image
        id: docker_build_test
        uses: docker/build-push-action@v3
        with:
          context: Dockerfiles
          tags: ${{ steps.prep.outputs.tags }}
          file: Dockerfiles/${{ matrix.image }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
          outputs: type=docker,dest=image.tar

      - name: Image digest
        run: echo ${{ steps.docker_build_test.outputs.digest }}

      - name: List built images
        run: docker images

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.image }}
          path: image.tar

  run:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Download artifact
        uses: actions/download-artifact@v2

      - name: Load images
        run:  |
          ls -lavh
          for image in */image.tar; do
            echo ::group::$(dirname $image)
            docker load --input $image |
            awk '{print $NF}' | xargs docker inspect
            echo ::endgroup::
          done
          docker image ls -a

      - name: Install MaPyDe
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install --upgrade .

      - name: List installed Python packages
        run: python -m pip list

      - name: Prepare Inputs for Generation
        run: |
          python3 -m pip install .
          mapyde config parse ci/charginos.toml
          mapyde config generate-mg5 ci/charginos.toml

      - name: Run Madgraph
        run: >-
          docker run --rm
          -v $PWD/githubci:/data
          -v $PWD/cards:/cards
          -w /output
          ghcr.io/${{ github.repository }}/madgraph:latest
          "mg5_aMC /data/run.mg5; rsync -rav PROC_madgraph /data/madgraph"

      - name: Run Delphes
        run: >-
          docker run --rm
          -v $PWD/githubci:/data
          -v $PWD/cards:/cards
          -w /output
          ghcr.io/${{ github.repository }}/delphes:latest
          'cp $(find /data/ -name "*hepmc.gz") hepmc.gz; gunzip hepmc.gz;
           /usr/local/share/delphes/delphes/DelphesHepMC /cards/delphes/delphes_card_ATLAS.tcl delphes.root hepmc;
           rsync -rav --exclude hepmc . /data/delphes'


      - name: Run Analysis
        run: >-
          docker run --rm
          -v $PWD/githubci:/data
          -v $PWD/cards:/cards
          -v $PWD/scripts:/scripts
          -w /output
          ghcr.io/${{ github.repository }}/delphes:latest
          "/scripts/SimpleAna.py --input /data/delphes/delphes.root --output histograms.root;
           rsync -rav . /data/analysis"

  deploy:
    needs: [changes, build, run]
    name: Deploy ${{ matrix.image }}
    if: ${{ needs.changes.outputs.changed == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJSON(needs.changes.outputs.changed_images) }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.image }}
          path: images

      - name: Load images
        run: |
          docker load --input images/image.tar

      - name: List images
        run: |
          echo ::group::all_images
          docker images -a
          echo ::endgroup::
          echo ::group::${{ matrix.image }}
          docker images -f 'label=org.opencontainers.image.revision=${{ github.sha }}' --format='{{.Repository}}:{{.Tag}}'
          echo ::endgroup::

      - name: Publish to registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'scipp-atlas/mario-mapyde'
        run: |
            image="ghcr.io/${{github.repository}}/${{ matrix.image }}:latest"
            echo "Pushing ${image}"
            docker push $image

      - name: Publish to registry with release tag
        if: github.event_name == 'release' && github.event.action == 'published' && github.repository == 'scipp-atlas/mario-mapyde'
        run: |
            for image in $(docker images -f 'label=org.opencontainers.image.revision=${{ github.sha }}' --format='{{.Repository}}:{{.Tag}}');
            do
                echo "Pushing ${image}"
                docker push $image
            done

  retag:
    needs: [changes, build, run]
    name: Re-tag ${{ matrix.image }}
    if: github.event_name == 'release' && github.event.action == 'published' && github.repository == 'scipp-atlas/mario-mapyde'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: ${{ fromJSON(needs.changes.outputs.unchanged_images) }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Re-tag on registry with release tag
        uses: akhilerm/tag-push-action@v2.0.0
        with:
          src: ghcr.io/${{github.repository}}/${{ matrix.image }}:latest
          dst: |
            ghcr.io/${{github.repository}}/${{ matrix.image }}:${{ github.event.release.tag_name }}
            ghcr.io/${{github.repository}}/${{ matrix.image }}:latest-stable
